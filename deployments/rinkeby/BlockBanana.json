{
  "address": "0x871684A82832F19AcFdF8612Db7B532f17c27Acb",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOfToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_TOKEN",
          "type": "uint256"
        }
      ],
      "name": "setMAX_TOKEN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_saleTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_whitelistSwitch",
          "type": "bool"
        }
      ],
      "name": "setSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5980c6ba5c5df19105e882068518c480c219634ba13cbbad726ee0af597f2cb",
  "receipt": {
    "to": null,
    "from": "0x5279246E3626Cebe71a4c181382A50a71d2A4156",
    "contractAddress": "0x871684A82832F19AcFdF8612Db7B532f17c27Acb",
    "transactionIndex": 33,
    "gasUsed": "5146917",
    "logsBloom": "0x
    "blockHash": "0x515dc9954389b60cf34fe8dc7c1c7951563e209b4bed6de72feb2a29d86bf681",
    "transactionHash": "0xe5980c6ba5c5df19105e882068518c480c219634ba13cbbad726ee0af597f2cb",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 10122383,
        "transactionHash": "0xe5980c6ba5c5df19105e882068518c480c219634ba13cbbad726ee0af597f2cb",
        "address": "0x871684A82832F19AcFdF8612Db7B532f17c27Acb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156"
        ],
        "data": "0x",
        "logIndex": 520,
        "blockHash": "0x515dc9954389b60cf34fe8dc7c1c7951563e209b4bed6de72feb2a29d86bf681"
      }
    ],
    "blockNumber": 10122383,
    "cumulativeGasUsed": "28071881",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "dc81354e7e363106776d99f056e66eb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOfToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_TOKEN\",\"type\":\"uint256\"}],\"name\":\"setMAX_TOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_saleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistSwitch\",\"type\":\"bool\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlockBanana.sol\":\"BlockBanana\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BlockBanana.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n//  ___  _           _       ___\\n// | _ )| | ___  __ | |__   | _ ) __ _  _ _   __ _  _ _   __ _\\n// | _ \\\\| |/ _ \\\\/ _|| / /   | _ \\\\/ _` || ' \\\\ / _` || ' \\\\ / _` |\\n// |___/|_|\\\\___/\\\\__||_\\\\_\\\\   |___/\\\\__,_||_||_|\\\\__,_||_||_|\\\\__,_|\\n\\ncontract BlockBanana is Ownable, EIP712, ERC1155{\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Variables\\n\\t// ------------------------------------------------------------------------\\n\\t// string private _name = \\\"Block Banana\\\";\\n\\tstring private _name = \\\"BB\\\";\\n\\tstring private _symbol = \\\"BB\\\";\\n\\tuint256 public MAX_TOKEN = 10000;\\n\\tuint256 public PRICE = 0.2 ether;\\n\\tuint256 public saleTimestamp = 1642410000; // \\n\\tuint256 public totalSupply = 0;\\n\\tbool public hasSaleStarted = true; //\\n\\tbool public whitelistSwitch = true;\\n\\taddress public treasury = 0x953C08e703978D00D992c920FE9104A4375De893; //\\n\\n\\tmapping (address => uint256) public hasMint;\\n\\tmapping (uint256 => address[]) public idHolder;\\n\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()ERC1155(\\\"https://gateway.pinata.cloud/ipfs/QmY6dhMrX7j9mUgRbzFxJff5bUpWjevifWjcprLuuwczpd\\\")\\n\\tEIP712(\\\"Block Banana\\\", \\\"1.0.0\\\"){} \\n\\t\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 quantity, uint256 totalSupply);\\n\\n\\t// Modifiers\\n\\t// ------------------------------------------------------------------------\\n    modifier onlySale() {\\n\\t\\trequire(hasSaleStarted == true, \\\"SALE_NOT_ACTIVE\\\");\\n        require(block.timestamp >= saleTimestamp, \\\"NOT_IN_SALE_TIME\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn owner() == recoveredAddr;\\n\\t}\\n\\n\\t// Mint functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintNFT(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlySale{\\n\\t\\tif (whitelistSwitch == true){\\n\\t\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\t}\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_TOKEN, \\\"Exceeds MAX_TOKEN.\\\");\\n\\t\\trequire(quantity > 0 && hasMint[msg.sender].add(quantity) <= 2, \\\"Exceeds max quantity.\\\");\\n\\t\\trequire(msg.value == PRICE.mul(quantity), \\\"Ether value sent is not equal the price.\\\");\\n\\n\\t\\t_mint(msg.sender, 1, quantity, \\\"\\\");\\n\\t\\t\\n\\t\\thasMint[msg.sender] = hasMint[msg.sender].add(quantity);\\n\\t\\tidHolder[1].push(msg.sender);\\n\\t\\ttotalSupply = totalSupply.add(quantity);\\n\\n\\t\\temit mintEvent(msg.sender, quantity, totalSupply);\\n\\t}\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveaway(address to, uint256 quantity) external onlyOwner{\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_TOKEN, \\\"Exceeds MAX_TOKEN.\\\");\\n\\t\\trequire(quantity > 0 && hasMint[to].add(quantity) <= 2, \\\"Exceeds max quantity.\\\");\\n\\n\\t\\t_mint(to, 1, quantity, \\\"\\\");\\n\\n\\t\\thasMint[to] = hasMint[to].add(quantity);\\n\\t\\ttotalSupply = totalSupply.add(quantity);\\n\\t\\tidHolder[1].push(to);\\n\\n\\t\\temit mintEvent(to, quantity, totalSupply);\\n\\t}\\n\\n\\t// Burn functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction burn(address to, uint256 quantity) external onlyOwner {\\n\\t\\t_burn(to, 1, quantity);\\n\\t}\\n\\n    // Query address list of token id.\\n    function ownerOfToken(uint256 id) external view returns(address[] memory ) {\\n        uint256 addressCount = idHolder[id].length;\\n        \\n        if (addressCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory result = new address[](addressCount);\\n            uint256 index;\\n            for (index = 0; index < addressCount; index++) {\\n                result[index] = idHolder[id][index];\\n            }\\n            return result;\\n        }\\n    }\\n\\n\\t// setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setMAX_TOKEN(uint _MAX_TOKEN) external onlyOwner {\\n\\t\\tMAX_TOKEN = _MAX_TOKEN;\\n\\t}\\n\\n\\tfunction set_PRICE(uint256 _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory baseURI) public onlyOwner {\\n\\t\\t_setURI(baseURI);\\n\\t}\\n\\n    function setSaleTime(bool _hasSaleStarted, uint256 _saleTimestamp, bool _whitelistSwitch) external onlyOwner {\\n        hasSaleStarted = _hasSaleStarted;\\n        saleTimestamp = _saleTimestamp;\\n\\t\\twhitelistSwitch = _whitelistSwitch;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(treasury != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xa308892a4fe83a2f860e2f3d9c79dae524e74e3e8a3bf2517f8bbf88cacce66a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040526040518060400160405280600281526020017f42420000000000000000000000000000000000000000000000000000000000008152506004908051906020019062000052929190620003b8565b506040518060400160405280600281526020017f424200000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000a0929190620003b8565b506127106006556702c68af0bb1400006007556361e5301060085560006009556001600a60006101000a81548160ff0219169083151502179055506001600a60016101000a81548160ff02191690831515021790555073953c08e703978d00d992c920fe9104a4375de893600a60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200015857600080fd5b5060405180608001604052806050815260200162005db5605091396040518060400160405280600c81526020017f426c6f636b2042616e616e6100000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250620001ff620001f36200029460201b60201c565b6200029c60201b60201c565b60008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a08181525050620002678184846200036060201b60201c565b6080818152505080610100818152505050505050506200028d816200039c60201b60201c565b50620005a5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600083838346306040516020016200037d9594939291906200049b565b6040516020818303038152906040528051906020012090509392505050565b8060039080519060200190620003b4929190620003b8565b5050565b828054620003c69062000540565b90600052602060002090601f016020900481019282620003ea576000855562000436565b82601f106200040557805160ff191683800117855562000436565b8280016001018555821562000436579182015b828111156200043557825182559160200191906001019062000418565b5b50905062000445919062000449565b5090565b5b80821115620004645760008160009055506001016200044a565b5090565b6200047381620004f8565b82525050565b62000484816200050c565b82525050565b620004958162000536565b82525050565b600060a082019050620004b2600083018862000479565b620004c1602083018762000479565b620004d0604083018662000479565b620004df60608301856200048a565b620004ee608083018462000468565b9695505050505050565b6000620005058262000516565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200055957607f821691505b6020821081141562000570576200056f62000576565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60805160a05160c05160e051610100516157cb620005ea6000396000613195015260006131d7015260006131b6015260006131420152600061316a01526157cb6000f3fe6080604052600436106101ed5760003560e01c806385852ce41161010d578063c1c25bc5116100a0578063d46c28111161006f578063d46c2811146106f1578063e985e9c51461070d578063f0f442601461074a578063f242432a14610773578063f2fde38b1461079c576101ed565b8063c1c25bc51461060f578063c57ac5d61461064c578063c6b13e9014610689578063c7822598146106c6576101ed565b80639d23ef03116100dc5780639d23ef03146105695780639dc29fac14610592578063a22cb465146105bb578063bcd25ee5146105e4576101ed565b806385852ce4146104ab5780638d859f3e146104e85780638da5cb5b1461051357806395d89b411461053e576101ed565b806339cce68e116101855780636456c205116101545780636456c205146104365780636e1bd3231461045f578063715018a61461048a578063853828b6146104a1576101ed565b806339cce68e1461037c5780634e1273f4146103a557806355f804b3146103e257806361d027b31461040b576101ed565b80630e89341c116101c15780630e89341c146102c057806318160ddd146102fd5780631c8b232d146103285780632eb2c2d614610353576101ed565b8062fdd58e146101f257806301ffc9a71461022f578063050225ea1461026c57806306fdde0314610295575b600080fd5b3480156101fe57600080fd5b5061021960048036038101906102149190613ca7565b6107c5565b6040516102269190614af2565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190613d9e565b61088f565b60405161026391906146a6565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190613ca7565b610971565b005b3480156102a157600080fd5b506102aa610c69565b6040516102b79190614790565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190613e31565b610cfb565b6040516102f49190614790565b60405180910390f35b34801561030957600080fd5b50610312610d8f565b60405161031f9190614af2565b60405180910390f35b34801561033457600080fd5b5061033d610d95565b60405161034a91906146a6565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190613b1d565b610da8565b005b34801561038857600080fd5b506103a3600480360381019061039e9190613d4f565b610e49565b005b3480156103b157600080fd5b506103cc60048036038101906103c79190613ce3565b610f05565b6040516103d9919061464d565b60405180910390f35b3480156103ee57600080fd5b5061040960048036038101906104049190613df0565b6110b6565b005b34801561041757600080fd5b5061042061113e565b60405161042d9190614517565b60405180910390f35b34801561044257600080fd5b5061045d60048036038101906104589190613e31565b611164565b005b34801561046b57600080fd5b506104746111ea565b6040516104819190614af2565b60405180910390f35b34801561049657600080fd5b5061049f6111f0565b005b6104a9611278565b005b3480156104b757600080fd5b506104d260048036038101906104cd9190613e5a565b611356565b6040516104df91906146a6565b60405180910390f35b3480156104f457600080fd5b506104fd6113fd565b60405161050a9190614af2565b60405180910390f35b34801561051f57600080fd5b50610528611403565b6040516105359190614517565b60405180910390f35b34801561054a57600080fd5b5061055361142c565b6040516105609190614790565b60405180910390f35b34801561057557600080fd5b50610590600480360381019061058b9190613e31565b6114be565b005b34801561059e57600080fd5b506105b960048036038101906105b49190613ca7565b611544565b005b3480156105c757600080fd5b506105e260048036038101906105dd9190613c6b565b6115d0565b005b3480156105f057600080fd5b506105f9611751565b60405161060691906146a6565b60405180910390f35b34801561061b57600080fd5b5061063660048036038101906106319190613ab8565b611764565b6040516106439190614af2565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190613e31565b61177c565b604051610680919061462b565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190613eae565b6119a0565b6040516106bd9190614517565b60405180910390f35b3480156106d257600080fd5b506106db6119ee565b6040516106e89190614af2565b60405180910390f35b61070b60048036038101906107069190613eea565b6119f4565b005b34801561071957600080fd5b50610734600480360381019061072f9190613ae1565b611dc8565b60405161074191906146a6565b60405180910390f35b34801561075657600080fd5b50610771600480360381019061076c9190613ab8565b611e5c565b005b34801561077f57600080fd5b5061079a60048036038101906107959190613bdc565b611fae565b005b3480156107a857600080fd5b506107c360048036038101906107be9190613ab8565b61204f565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d906148b2565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061096a575061096982612147565b5b9050919050565b6109796121b1565b73ffffffffffffffffffffffffffffffffffffffff16610997611403565b73ffffffffffffffffffffffffffffffffffffffff16146109ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e490614a12565b60405180910390fd5b600654610a05826009546121b990919063ffffffff16565b1115610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90614832565b60405180910390fd5b600081118015610aa857506002610aa582600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b11155b610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90614a52565b60405180910390fd5b610b0382600183604051806020016040528060008152506121cf565b610b5581600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bad816009546121b990919063ffffffff16565b600981905550600c600060018152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282600954604051610c5d939291906145f4565b60405180910390a15050565b606060048054610c7890614e47565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490614e47565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b606060038054610d0a90614e47565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3690614e47565b8015610d835780601f10610d5857610100808354040283529160200191610d83565b820191906000526020600020905b815481529060010190602001808311610d6657829003601f168201915b50505050509050919050565b60095481565b600a60009054906101000a900460ff1681565b610db06121b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610df65750610df585610df06121b1565b611dc8565b5b610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c90614992565b60405180910390fd5b610e428585858585612366565b5050505050565b610e516121b1565b73ffffffffffffffffffffffffffffffffffffffff16610e6f611403565b73ffffffffffffffffffffffffffffffffffffffff1614610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90614a12565b60405180910390fd5b82600a60006101000a81548160ff0219169083151502179055508160088190555080600a60016101000a81548160ff021916908315150217905550505050565b60608151835114610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290614a92565b60405180910390fd5b6000835167ffffffffffffffff811115610f8e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610fbc5781602001602082028036833780820191505090505b50905060005b84518110156110ab57611055858281518110611007577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110611048577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107c5565b82828151811061108e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050806110a490614eaa565b9050610fc2565b508091505092915050565b6110be6121b1565b73ffffffffffffffffffffffffffffffffffffffff166110dc611403565b73ffffffffffffffffffffffffffffffffffffffff1614611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990614a12565b60405180910390fd5b61113b816126c9565b50565b600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61116c6121b1565b73ffffffffffffffffffffffffffffffffffffffff1661118a611403565b73ffffffffffffffffffffffffffffffffffffffff16146111e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d790614a12565b60405180910390fd5b8060078190555050565b60065481565b6111f86121b1565b73ffffffffffffffffffffffffffffffffffffffff16611216611403565b73ffffffffffffffffffffffffffffffffffffffff161461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390614a12565b60405180910390fd5b61127660006126e3565b565b6112806121b1565b73ffffffffffffffffffffffffffffffffffffffff1661129e611403565b73ffffffffffffffffffffffffffffffffffffffff16146112f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112eb90614a12565b60405180910390fd5b600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061135457600080fd5b565b6000806113bc6113b67f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec16113886121b1565b8760405160200161139b939291906146c1565b604051602081830303815290604052805190602001206127a7565b846127c1565b90508073ffffffffffffffffffffffffffffffffffffffff166113dd611403565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60075481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461143b90614e47565b80601f016020809104026020016040519081016040528092919081815260200182805461146790614e47565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b5050505050905090565b6114c66121b1565b73ffffffffffffffffffffffffffffffffffffffff166114e4611403565b73ffffffffffffffffffffffffffffffffffffffff161461153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190614a12565b60405180910390fd5b8060068190555050565b61154c6121b1565b73ffffffffffffffffffffffffffffffffffffffff1661156a611403565b73ffffffffffffffffffffffffffffffffffffffff16146115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790614a12565b60405180910390fd5b6115cc826001836127e8565b5050565b8173ffffffffffffffffffffffffffffffffffffffff166115ef6121b1565b73ffffffffffffffffffffffffffffffffffffffff161415611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d90614a72565b60405180910390fd5b80600260006116536121b1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166117006121b1565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161174591906146a6565b60405180910390a35050565b600a60019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60606000600c6000848152602001908152602001600020805490509050600081141561181a57600067ffffffffffffffff8111156117e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118115781602001602082028036833780820191505090505b5091505061199b565b60008167ffffffffffffffff81111561185c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561188a5781602001602082028036833780820191505090505b50905060005b8281101561199457600c600086815260200190815260200160002081815481106118e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611947577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061198c90614eaa565b915050611890565b8193505050505b919050565b600c60205281600052604060002081815481106119bc57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60011515600a60009054906101000a900460ff16151514611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190614a32565b60405180910390fd5b600854421015611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86906147f2565b60405180910390fd5b60011515600a60019054906101000a900460ff1615151415611af557611ab58282611356565b611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90614872565b60405180910390fd5b5b600654611b0d846009546121b990919063ffffffff16565b1115611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590614832565b60405180910390fd5b600083118015611bb057506002611bad84600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b11155b611bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be690614a52565b60405180910390fd5b611c0483600754612a0790919063ffffffff16565b3414611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c906148d2565b60405180910390fd5b611c6133600185604051806020016040528060008152506121cf565b611cb383600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c600060018152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d80836009546121b990919063ffffffff16565b6009819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384600954604051611dbb939291906145f4565b60405180910390a1505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611e646121b1565b73ffffffffffffffffffffffffffffffffffffffff16611e82611403565b73ffffffffffffffffffffffffffffffffffffffff1614611ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecf90614a12565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6190614852565b60405180910390fd5b80600a60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611fb66121b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611ffc5750611ffb85611ff66121b1565b611dc8565b5b61203b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203290614932565b60405180910390fd5b6120488585858585612a1d565b5050505050565b6120576121b1565b73ffffffffffffffffffffffffffffffffffffffff16612075611403565b73ffffffffffffffffffffffffffffffffffffffff16146120cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c290614a12565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561213b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612132906148f2565b60405180910390fd5b612144816126e3565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600081836121c79190614cca565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690614ad2565b60405180910390fd5b60006122496121b1565b905061226a8160008761225b88612ca2565b61226488612ca2565b87612d68565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122ca9190614cca565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612348929190614b0d565b60405180910390a461235f81600087878787612d70565b5050505050565b81518351146123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a190614ab2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561241a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241190614972565b60405180910390fd5b60006124246121b1565b9050612434818787878787612d68565b60005b845181101561263457600085828151811061247b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106124c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612562576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612559906149f2565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126199190614cca565b925050819055505050508061262d90614eaa565b9050612437565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516126ab92919061466f565b60405180910390a46126c1818787878787612f57565b505050505050565b80600390805190602001906126df9291906137b0565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006127ba6127b461313e565b83613201565b9050919050565b60008060006127d08585613234565b915091506127dd816132b7565b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284f906149d2565b60405180910390fd5b60006128626121b1565b90506128928185600061287487612ca2565b61287d87612ca2565b60405180602001604052806000815250612d68565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561292a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292190614912565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516129f8929190614b0d565b60405180910390a45050505050565b60008183612a159190614d20565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8490614972565b60405180910390fd5b6000612a976121b1565b9050612ab7818787612aa888612ca2565b612ab188612ca2565b87612d68565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b46906149f2565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c069190614cca565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612c83929190614b0d565b60405180910390a4612c99828888888888612d70565b50505050505050565b60606000600167ffffffffffffffff811115612ce7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612d155781602001602082028036833780820191505090505b5090508281600081518110612d53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b505050505050565b612d8f8473ffffffffffffffffffffffffffffffffffffffff16613608565b15612f4f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612dd595949392919061459a565b602060405180830381600087803b158015612def57600080fd5b505af1925050508015612e2057506040513d601f19601f82011682018060405250810190612e1d9190613dc7565b60015b612ec657612e2c614f8a565b806308c379a01415612e895750612e416156a3565b80612e4c5750612e8b565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e809190614790565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebd906147d2565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4490614812565b60405180910390fd5b505b505050505050565b612f768473ffffffffffffffffffffffffffffffffffffffff16613608565b15613136578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612fbc959493929190614532565b602060405180830381600087803b158015612fd657600080fd5b505af192505050801561300757506040513d601f19601f820116820180604052508101906130049190613dc7565b60015b6130ad57613013614f8a565b806308c379a0141561307057506130286156a3565b806130335750613072565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130679190614790565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a4906147d2565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312b90614812565b60405180910390fd5b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415613190577f000000000000000000000000000000000000000000000000000000000000000090506131fe565b6131fb7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061361b565b90505b90565b600082826040516020016132169291906144e0565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156132765760008060006020860151925060408601519150606086015160001a905061326a87828585613655565b945094505050506132b0565b6040835114156132a757600080602085015191506040850151905061329c868383613762565b9350935050506132b0565b60006002915091505b9250929050565b600060048111156132f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561332a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561333557613605565b6001600481111561336f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e0906147b2565b60405180910390fd5b60026004811115613423577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561345c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561349d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349490614892565b60405180910390fd5b600360048111156134d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613510577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354890614952565b60405180910390fd5b60048081111561358a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156135c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fb906149b2565b60405180910390fd5b5b50565b600080823b905060008111915050919050565b600083838346306040516020016136369594939291906146f8565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613690576000600391509150613759565b601b8560ff16141580156136a85750601c8560ff1614155b156136ba576000600491509150613759565b6000600187878787604051600081526020016040526040516136df949392919061474b565b6020604051602081039080840390855afa158015613701573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561375057600060019250925050613759565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506137a287828885613655565b935093505050935093915050565b8280546137bc90614e47565b90600052602060002090601f0160209004810192826137de5760008555613825565b82601f106137f757805160ff1916838001178555613825565b82800160010185558215613825579182015b82811115613824578251825591602001919060010190613809565b5b5090506138329190613836565b5090565b5b8082111561384f576000816000905550600101613837565b5090565b600061386661386184614b5b565b614b36565b9050808382526020820190508285602086028201111561388557600080fd5b60005b858110156138b5578161389b88826139a7565b845260208401935060208301925050600181019050613888565b5050509392505050565b60006138d26138cd84614b87565b614b36565b905080838252602082019050828560208602820111156138f157600080fd5b60005b8581101561392157816139078882613aa3565b8452602084019350602083019250506001810190506138f4565b5050509392505050565b600061393e61393984614bb3565b614b36565b90508281526020810184848401111561395657600080fd5b613961848285614e05565b509392505050565b600061397c61397784614be4565b614b36565b90508281526020810184848401111561399457600080fd5b61399f848285614e05565b509392505050565b6000813590506139b681615739565b92915050565b600082601f8301126139cd57600080fd5b81356139dd848260208601613853565b91505092915050565b600082601f8301126139f757600080fd5b8135613a078482602086016138bf565b91505092915050565b600081359050613a1f81615750565b92915050565b600081359050613a3481615767565b92915050565b600081519050613a4981615767565b92915050565b600082601f830112613a6057600080fd5b8135613a7084826020860161392b565b91505092915050565b600082601f830112613a8a57600080fd5b8135613a9a848260208601613969565b91505092915050565b600081359050613ab28161577e565b92915050565b600060208284031215613aca57600080fd5b6000613ad8848285016139a7565b91505092915050565b60008060408385031215613af457600080fd5b6000613b02858286016139a7565b9250506020613b13858286016139a7565b9150509250929050565b600080600080600060a08688031215613b3557600080fd5b6000613b43888289016139a7565b9550506020613b54888289016139a7565b945050604086013567ffffffffffffffff811115613b7157600080fd5b613b7d888289016139e6565b935050606086013567ffffffffffffffff811115613b9a57600080fd5b613ba6888289016139e6565b925050608086013567ffffffffffffffff811115613bc357600080fd5b613bcf88828901613a4f565b9150509295509295909350565b600080600080600060a08688031215613bf457600080fd5b6000613c02888289016139a7565b9550506020613c13888289016139a7565b9450506040613c2488828901613aa3565b9350506060613c3588828901613aa3565b925050608086013567ffffffffffffffff811115613c5257600080fd5b613c5e88828901613a4f565b9150509295509295909350565b60008060408385031215613c7e57600080fd5b6000613c8c858286016139a7565b9250506020613c9d85828601613a10565b9150509250929050565b60008060408385031215613cba57600080fd5b6000613cc8858286016139a7565b9250506020613cd985828601613aa3565b9150509250929050565b60008060408385031215613cf657600080fd5b600083013567ffffffffffffffff811115613d1057600080fd5b613d1c858286016139bc565b925050602083013567ffffffffffffffff811115613d3957600080fd5b613d45858286016139e6565b9150509250929050565b600080600060608486031215613d6457600080fd5b6000613d7286828701613a10565b9350506020613d8386828701613aa3565b9250506040613d9486828701613a10565b9150509250925092565b600060208284031215613db057600080fd5b6000613dbe84828501613a25565b91505092915050565b600060208284031215613dd957600080fd5b6000613de784828501613a3a565b91505092915050565b600060208284031215613e0257600080fd5b600082013567ffffffffffffffff811115613e1c57600080fd5b613e2884828501613a79565b91505092915050565b600060208284031215613e4357600080fd5b6000613e5184828501613aa3565b91505092915050565b60008060408385031215613e6d57600080fd5b6000613e7b85828601613aa3565b925050602083013567ffffffffffffffff811115613e9857600080fd5b613ea485828601613a4f565b9150509250929050565b60008060408385031215613ec157600080fd5b6000613ecf85828601613aa3565b9250506020613ee085828601613aa3565b9150509250929050565b600080600060608486031215613eff57600080fd5b6000613f0d86828701613aa3565b9350506020613f1e86828701613aa3565b925050604084013567ffffffffffffffff811115613f3b57600080fd5b613f4786828701613a4f565b9150509250925092565b6000613f5d8383613f81565b60208301905092915050565b6000613f7583836144b3565b60208301905092915050565b613f8a81614d7a565b82525050565b613f9981614d7a565b82525050565b6000613faa82614c35565b613fb48185614c7b565b9350613fbf83614c15565b8060005b83811015613ff0578151613fd78882613f51565b9750613fe283614c61565b925050600181019050613fc3565b5085935050505092915050565b600061400882614c40565b6140128185614c8c565b935061401d83614c25565b8060005b8381101561404e5781516140358882613f69565b975061404083614c6e565b925050600181019050614021565b5085935050505092915050565b61406481614d8c565b82525050565b61407381614d98565b82525050565b61408a61408582614d98565b614ef3565b82525050565b600061409b82614c4b565b6140a58185614c9d565b93506140b5818560208601614e14565b6140be81614fac565b840191505092915050565b60006140d482614c56565b6140de8185614cae565b93506140ee818560208601614e14565b6140f781614fac565b840191505092915050565b600061410f601883614cae565b915061411a82614fca565b602082019050919050565b6000614132603483614cae565b915061413d82614ff3565b604082019050919050565b6000614155601083614cae565b915061416082615042565b602082019050919050565b6000614178602883614cae565b91506141838261506b565b604082019050919050565b600061419b601283614cae565b91506141a6826150ba565b602082019050919050565b60006141be601483614cae565b91506141c9826150e3565b602082019050919050565b60006141e1601b83614cae565b91506141ec8261510c565b602082019050919050565b6000614204601f83614cae565b915061420f82615135565b602082019050919050565b6000614227602b83614cae565b91506142328261515e565b604082019050919050565b600061424a602883614cae565b9150614255826151ad565b604082019050919050565b600061426d602683614cae565b9150614278826151fc565b604082019050919050565b6000614290602483614cae565b915061429b8261524b565b604082019050919050565b60006142b3600283614cbf565b91506142be8261529a565b600282019050919050565b60006142d6602983614cae565b91506142e1826152c3565b604082019050919050565b60006142f9602283614cae565b915061430482615312565b604082019050919050565b600061431c602583614cae565b915061432782615361565b604082019050919050565b600061433f603283614cae565b915061434a826153b0565b604082019050919050565b6000614362602283614cae565b915061436d826153ff565b604082019050919050565b6000614385602383614cae565b91506143908261544e565b604082019050919050565b60006143a8602a83614cae565b91506143b38261549d565b604082019050919050565b60006143cb602083614cae565b91506143d6826154ec565b602082019050919050565b60006143ee600f83614cae565b91506143f982615515565b602082019050919050565b6000614411601583614cae565b915061441c8261553e565b602082019050919050565b6000614434602983614cae565b915061443f82615567565b604082019050919050565b6000614457602983614cae565b9150614462826155b6565b604082019050919050565b600061447a602883614cae565b915061448582615605565b604082019050919050565b600061449d602183614cae565b91506144a882615654565b604082019050919050565b6144bc81614dee565b82525050565b6144cb81614dee565b82525050565b6144da81614df8565b82525050565b60006144eb826142a6565b91506144f78285614079565b6020820191506145078284614079565b6020820191508190509392505050565b600060208201905061452c6000830184613f90565b92915050565b600060a0820190506145476000830188613f90565b6145546020830187613f90565b81810360408301526145668186613ffd565b9050818103606083015261457a8185613ffd565b9050818103608083015261458e8184614090565b90509695505050505050565b600060a0820190506145af6000830188613f90565b6145bc6020830187613f90565b6145c960408301866144c2565b6145d660608301856144c2565b81810360808301526145e88184614090565b90509695505050505050565b60006060820190506146096000830186613f90565b61461660208301856144c2565b61462360408301846144c2565b949350505050565b600060208201905081810360008301526146458184613f9f565b905092915050565b600060208201905081810360008301526146678184613ffd565b905092915050565b600060408201905081810360008301526146898185613ffd565b9050818103602083015261469d8184613ffd565b90509392505050565b60006020820190506146bb600083018461405b565b92915050565b60006060820190506146d6600083018661406a565b6146e36020830185613f90565b6146f060408301846144c2565b949350505050565b600060a08201905061470d600083018861406a565b61471a602083018761406a565b614727604083018661406a565b61473460608301856144c2565b6147416080830184613f90565b9695505050505050565b6000608082019050614760600083018761406a565b61476d60208301866144d1565b61477a604083018561406a565b614787606083018461406a565b95945050505050565b600060208201905081810360008301526147aa81846140c9565b905092915050565b600060208201905081810360008301526147cb81614102565b9050919050565b600060208201905081810360008301526147eb81614125565b9050919050565b6000602082019050818103600083015261480b81614148565b9050919050565b6000602082019050818103600083015261482b8161416b565b9050919050565b6000602082019050818103600083015261484b8161418e565b9050919050565b6000602082019050818103600083015261486b816141b1565b9050919050565b6000602082019050818103600083015261488b816141d4565b9050919050565b600060208201905081810360008301526148ab816141f7565b9050919050565b600060208201905081810360008301526148cb8161421a565b9050919050565b600060208201905081810360008301526148eb8161423d565b9050919050565b6000602082019050818103600083015261490b81614260565b9050919050565b6000602082019050818103600083015261492b81614283565b9050919050565b6000602082019050818103600083015261494b816142c9565b9050919050565b6000602082019050818103600083015261496b816142ec565b9050919050565b6000602082019050818103600083015261498b8161430f565b9050919050565b600060208201905081810360008301526149ab81614332565b9050919050565b600060208201905081810360008301526149cb81614355565b9050919050565b600060208201905081810360008301526149eb81614378565b9050919050565b60006020820190508181036000830152614a0b8161439b565b9050919050565b60006020820190508181036000830152614a2b816143be565b9050919050565b60006020820190508181036000830152614a4b816143e1565b9050919050565b60006020820190508181036000830152614a6b81614404565b9050919050565b60006020820190508181036000830152614a8b81614427565b9050919050565b60006020820190508181036000830152614aab8161444a565b9050919050565b60006020820190508181036000830152614acb8161446d565b9050919050565b60006020820190508181036000830152614aeb81614490565b9050919050565b6000602082019050614b0760008301846144c2565b92915050565b6000604082019050614b2260008301856144c2565b614b2f60208301846144c2565b9392505050565b6000614b40614b51565b9050614b4c8282614e79565b919050565b6000604051905090565b600067ffffffffffffffff821115614b7657614b75614f5b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614ba257614ba1614f5b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bce57614bcd614f5b565b5b614bd782614fac565b9050602081019050919050565b600067ffffffffffffffff821115614bff57614bfe614f5b565b5b614c0882614fac565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614cd582614dee565b9150614ce083614dee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d1557614d14614efd565b5b828201905092915050565b6000614d2b82614dee565b9150614d3683614dee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6f57614d6e614efd565b5b828202905092915050565b6000614d8582614dce565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614e32578082015181840152602081019050614e17565b83811115614e41576000848401525b50505050565b60006002820490506001821680614e5f57607f821691505b60208210811415614e7357614e72614f2c565b5b50919050565b614e8282614fac565b810181811067ffffffffffffffff82111715614ea157614ea0614f5b565b5b80604052505050565b6000614eb582614dee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ee857614ee7614efd565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115614fa95760046000803e614fa6600051614fbd565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4e4f545f494e5f53414c455f54494d4500000000000000000000000000000000600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f544f4b454e2e0000000000000000000000000000600082015250565b7f53455454494e475f5a45524f5f41444452455353000000000000000000000000600082015250565b7f4e6f7420656c696769626c6520666f722077686974656c6973742e0000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e74206973206e6f7420657175616c20746860008201527f652070726963652e000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53414c455f4e4f545f4143544956450000000000000000000000000000000000600082015250565b7f45786365656473206d6178207175616e746974792e0000000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d10156156b357615736565b6156bb614b51565b60043d036004823e80513d602482011167ffffffffffffffff821117156156e3575050615736565b808201805167ffffffffffffffff8111156157015750505050615736565b80602083010160043d03850181111561571e575050505050615736565b61572d82602001850186614e79565b82955050505050505b90565b61574281614d7a565b811461574d57600080fd5b50565b61575981614d8c565b811461576457600080fd5b50565b61577081614da2565b811461577b57600080fd5b50565b61578781614dee565b811461579257600080fd5b5056fea26469706673582212206a7022d7f1624a7b35108a11f03dd0a1c3d4213fb04dec4329b2d35c22a962ac64736f6c6343000804003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d593664684d7258376a396d556752627a46784a666635625570576a65766966576a6370724c757577637a7064",
  "deployedBytecode": "0x6080604052600436106101ed5760003560e01c806385852ce41161010d578063c1c25bc5116100a0578063d46c28111161006f578063d46c2811146106f1578063e985e9c51461070d578063f0f442601461074a578063f242432a14610773578063f2fde38b1461079c576101ed565b8063c1c25bc51461060f578063c57ac5d61461064c578063c6b13e9014610689578063c7822598146106c6576101ed565b80639d23ef03116100dc5780639d23ef03146105695780639dc29fac14610592578063a22cb465146105bb578063bcd25ee5146105e4576101ed565b806385852ce4146104ab5780638d859f3e146104e85780638da5cb5b1461051357806395d89b411461053e576101ed565b806339cce68e116101855780636456c205116101545780636456c205146104365780636e1bd3231461045f578063715018a61461048a578063853828b6146104a1576101ed565b806339cce68e1461037c5780634e1273f4146103a557806355f804b3146103e257806361d027b31461040b576101ed565b80630e89341c116101c15780630e89341c146102c057806318160ddd146102fd5780631c8b232d146103285780632eb2c2d614610353576101ed565b8062fdd58e146101f257806301ffc9a71461022f578063050225ea1461026c57806306fdde0314610295575b600080fd5b3480156101fe57600080fd5b5061021960048036038101906102149190613ca7565b6107c5565b6040516102269190614af2565b60405180910390f35b34801561023b57600080fd5b5061025660048036038101906102519190613d9e565b61088f565b60405161026391906146a6565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e9190613ca7565b610971565b005b3480156102a157600080fd5b506102aa610c69565b6040516102b79190614790565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190613e31565b610cfb565b6040516102f49190614790565b60405180910390f35b34801561030957600080fd5b50610312610d8f565b60405161031f9190614af2565b60405180910390f35b34801561033457600080fd5b5061033d610d95565b60405161034a91906146a6565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190613b1d565b610da8565b005b34801561038857600080fd5b506103a3600480360381019061039e9190613d4f565b610e49565b005b3480156103b157600080fd5b506103cc60048036038101906103c79190613ce3565b610f05565b6040516103d9919061464d565b60405180910390f35b3480156103ee57600080fd5b5061040960048036038101906104049190613df0565b6110b6565b005b34801561041757600080fd5b5061042061113e565b60405161042d9190614517565b60405180910390f35b34801561044257600080fd5b5061045d60048036038101906104589190613e31565b611164565b005b34801561046b57600080fd5b506104746111ea565b6040516104819190614af2565b60405180910390f35b34801561049657600080fd5b5061049f6111f0565b005b6104a9611278565b005b3480156104b757600080fd5b506104d260048036038101906104cd9190613e5a565b611356565b6040516104df91906146a6565b60405180910390f35b3480156104f457600080fd5b506104fd6113fd565b60405161050a9190614af2565b60405180910390f35b34801561051f57600080fd5b50610528611403565b6040516105359190614517565b60405180910390f35b34801561054a57600080fd5b5061055361142c565b6040516105609190614790565b60405180910390f35b34801561057557600080fd5b50610590600480360381019061058b9190613e31565b6114be565b005b34801561059e57600080fd5b506105b960048036038101906105b49190613ca7565b611544565b005b3480156105c757600080fd5b506105e260048036038101906105dd9190613c6b565b6115d0565b005b3480156105f057600080fd5b506105f9611751565b60405161060691906146a6565b60405180910390f35b34801561061b57600080fd5b5061063660048036038101906106319190613ab8565b611764565b6040516106439190614af2565b60405180910390f35b34801561065857600080fd5b50610673600480360381019061066e9190613e31565b61177c565b604051610680919061462b565b60405180910390f35b34801561069557600080fd5b506106b060048036038101906106ab9190613eae565b6119a0565b6040516106bd9190614517565b60405180910390f35b3480156106d257600080fd5b506106db6119ee565b6040516106e89190614af2565b60405180910390f35b61070b60048036038101906107069190613eea565b6119f4565b005b34801561071957600080fd5b50610734600480360381019061072f9190613ae1565b611dc8565b60405161074191906146a6565b60405180910390f35b34801561075657600080fd5b50610771600480360381019061076c9190613ab8565b611e5c565b005b34801561077f57600080fd5b5061079a60048036038101906107959190613bdc565b611fae565b005b3480156107a857600080fd5b506107c360048036038101906107be9190613ab8565b61204f565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d906148b2565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061096a575061096982612147565b5b9050919050565b6109796121b1565b73ffffffffffffffffffffffffffffffffffffffff16610997611403565b73ffffffffffffffffffffffffffffffffffffffff16146109ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e490614a12565b60405180910390fd5b600654610a05826009546121b990919063ffffffff16565b1115610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90614832565b60405180910390fd5b600081118015610aa857506002610aa582600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b11155b610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90614a52565b60405180910390fd5b610b0382600183604051806020016040528060008152506121cf565b610b5581600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bad816009546121b990919063ffffffff16565b600981905550600c600060018152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282600954604051610c5d939291906145f4565b60405180910390a15050565b606060048054610c7890614e47565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490614e47565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b606060038054610d0a90614e47565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3690614e47565b8015610d835780601f10610d5857610100808354040283529160200191610d83565b820191906000526020600020905b815481529060010190602001808311610d6657829003601f168201915b50505050509050919050565b60095481565b600a60009054906101000a900460ff1681565b610db06121b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610df65750610df585610df06121b1565b611dc8565b5b610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c90614992565b60405180910390fd5b610e428585858585612366565b5050505050565b610e516121b1565b73ffffffffffffffffffffffffffffffffffffffff16610e6f611403565b73ffffffffffffffffffffffffffffffffffffffff1614610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90614a12565b60405180910390fd5b82600a60006101000a81548160ff0219169083151502179055508160088190555080600a60016101000a81548160ff021916908315150217905550505050565b60608151835114610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290614a92565b60405180910390fd5b6000835167ffffffffffffffff811115610f8e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610fbc5781602001602082028036833780820191505090505b50905060005b84518110156110ab57611055858281518110611007577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110611048577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107c5565b82828151811061108e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050806110a490614eaa565b9050610fc2565b508091505092915050565b6110be6121b1565b73ffffffffffffffffffffffffffffffffffffffff166110dc611403565b73ffffffffffffffffffffffffffffffffffffffff1614611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990614a12565b60405180910390fd5b61113b816126c9565b50565b600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61116c6121b1565b73ffffffffffffffffffffffffffffffffffffffff1661118a611403565b73ffffffffffffffffffffffffffffffffffffffff16146111e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d790614a12565b60405180910390fd5b8060078190555050565b60065481565b6111f86121b1565b73ffffffffffffffffffffffffffffffffffffffff16611216611403565b73ffffffffffffffffffffffffffffffffffffffff161461126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126390614a12565b60405180910390fd5b61127660006126e3565b565b6112806121b1565b73ffffffffffffffffffffffffffffffffffffffff1661129e611403565b73ffffffffffffffffffffffffffffffffffffffff16146112f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112eb90614a12565b60405180910390fd5b600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061135457600080fd5b565b6000806113bc6113b67f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec16113886121b1565b8760405160200161139b939291906146c1565b604051602081830303815290604052805190602001206127a7565b846127c1565b90508073ffffffffffffffffffffffffffffffffffffffff166113dd611403565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60075481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461143b90614e47565b80601f016020809104026020016040519081016040528092919081815260200182805461146790614e47565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b5050505050905090565b6114c66121b1565b73ffffffffffffffffffffffffffffffffffffffff166114e4611403565b73ffffffffffffffffffffffffffffffffffffffff161461153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190614a12565b60405180910390fd5b8060068190555050565b61154c6121b1565b73ffffffffffffffffffffffffffffffffffffffff1661156a611403565b73ffffffffffffffffffffffffffffffffffffffff16146115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790614a12565b60405180910390fd5b6115cc826001836127e8565b5050565b8173ffffffffffffffffffffffffffffffffffffffff166115ef6121b1565b73ffffffffffffffffffffffffffffffffffffffff161415611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d90614a72565b60405180910390fd5b80600260006116536121b1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166117006121b1565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161174591906146a6565b60405180910390a35050565b600a60019054906101000a900460ff1681565b600b6020528060005260406000206000915090505481565b60606000600c6000848152602001908152602001600020805490509050600081141561181a57600067ffffffffffffffff8111156117e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118115781602001602082028036833780820191505090505b5091505061199b565b60008167ffffffffffffffff81111561185c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561188a5781602001602082028036833780820191505090505b50905060005b8281101561199457600c600086815260200190815260200160002081815481106118e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611947577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061198c90614eaa565b915050611890565b8193505050505b919050565b600c60205281600052604060002081815481106119bc57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60011515600a60009054906101000a900460ff16151514611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190614a32565b60405180910390fd5b600854421015611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86906147f2565b60405180910390fd5b60011515600a60019054906101000a900460ff1615151415611af557611ab58282611356565b611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90614872565b60405180910390fd5b5b600654611b0d846009546121b990919063ffffffff16565b1115611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590614832565b60405180910390fd5b600083118015611bb057506002611bad84600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b11155b611bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be690614a52565b60405180910390fd5b611c0483600754612a0790919063ffffffff16565b3414611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c906148d2565b60405180910390fd5b611c6133600185604051806020016040528060008152506121cf565b611cb383600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121b990919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c600060018152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d80836009546121b990919063ffffffff16565b6009819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384600954604051611dbb939291906145f4565b60405180910390a1505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611e646121b1565b73ffffffffffffffffffffffffffffffffffffffff16611e82611403565b73ffffffffffffffffffffffffffffffffffffffff1614611ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecf90614a12565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6190614852565b60405180910390fd5b80600a60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611fb66121b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611ffc5750611ffb85611ff66121b1565b611dc8565b5b61203b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203290614932565b60405180910390fd5b6120488585858585612a1d565b5050505050565b6120576121b1565b73ffffffffffffffffffffffffffffffffffffffff16612075611403565b73ffffffffffffffffffffffffffffffffffffffff16146120cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c290614a12565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561213b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612132906148f2565b60405180910390fd5b612144816126e3565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600081836121c79190614cca565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690614ad2565b60405180910390fd5b60006122496121b1565b905061226a8160008761225b88612ca2565b61226488612ca2565b87612d68565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122ca9190614cca565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612348929190614b0d565b60405180910390a461235f81600087878787612d70565b5050505050565b81518351146123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a190614ab2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561241a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241190614972565b60405180910390fd5b60006124246121b1565b9050612434818787878787612d68565b60005b845181101561263457600085828151811061247b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008583815181106124c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612562576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612559906149f2565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126199190614cca565b925050819055505050508061262d90614eaa565b9050612437565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516126ab92919061466f565b60405180910390a46126c1818787878787612f57565b505050505050565b80600390805190602001906126df9291906137b0565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006127ba6127b461313e565b83613201565b9050919050565b60008060006127d08585613234565b915091506127dd816132b7565b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284f906149d2565b60405180910390fd5b60006128626121b1565b90506128928185600061287487612ca2565b61287d87612ca2565b60405180602001604052806000815250612d68565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561292a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292190614912565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516129f8929190614b0d565b60405180910390a45050505050565b60008183612a159190614d20565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8490614972565b60405180910390fd5b6000612a976121b1565b9050612ab7818787612aa888612ca2565b612ab188612ca2565b87612d68565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b46906149f2565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c069190614cca565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612c83929190614b0d565b60405180910390a4612c99828888888888612d70565b50505050505050565b60606000600167ffffffffffffffff811115612ce7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612d155781602001602082028036833780820191505090505b5090508281600081518110612d53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b505050505050565b612d8f8473ffffffffffffffffffffffffffffffffffffffff16613608565b15612f4f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612dd595949392919061459a565b602060405180830381600087803b158015612def57600080fd5b505af1925050508015612e2057506040513d601f19601f82011682018060405250810190612e1d9190613dc7565b60015b612ec657612e2c614f8a565b806308c379a01415612e895750612e416156a3565b80612e4c5750612e8b565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e809190614790565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebd906147d2565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4490614812565b60405180910390fd5b505b505050505050565b612f768473ffffffffffffffffffffffffffffffffffffffff16613608565b15613136578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612fbc959493929190614532565b602060405180830381600087803b158015612fd657600080fd5b505af192505050801561300757506040513d601f19601f820116820180604052508101906130049190613dc7565b60015b6130ad57613013614f8a565b806308c379a0141561307057506130286156a3565b806130335750613072565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130679190614790565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a4906147d2565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312b90614812565b60405180910390fd5b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415613190577f000000000000000000000000000000000000000000000000000000000000000090506131fe565b6131fb7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061361b565b90505b90565b600082826040516020016132169291906144e0565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156132765760008060006020860151925060408601519150606086015160001a905061326a87828585613655565b945094505050506132b0565b6040835114156132a757600080602085015191506040850151905061329c868383613762565b9350935050506132b0565b60006002915091505b9250929050565b600060048111156132f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561332a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561333557613605565b6001600481111561336f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e0906147b2565b60405180910390fd5b60026004811115613423577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561345c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561349d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349490614892565b60405180910390fd5b600360048111156134d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613510577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354890614952565b60405180910390fd5b60048081111561358a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156135c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fb906149b2565b60405180910390fd5b5b50565b600080823b905060008111915050919050565b600083838346306040516020016136369594939291906146f8565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613690576000600391509150613759565b601b8560ff16141580156136a85750601c8560ff1614155b156136ba576000600491509150613759565b6000600187878787604051600081526020016040526040516136df949392919061474b565b6020604051602081039080840390855afa158015613701573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561375057600060019250925050613759565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506137a287828885613655565b935093505050935093915050565b8280546137bc90614e47565b90600052602060002090601f0160209004810192826137de5760008555613825565b82601f106137f757805160ff1916838001178555613825565b82800160010185558215613825579182015b82811115613824578251825591602001919060010190613809565b5b5090506138329190613836565b5090565b5b8082111561384f576000816000905550600101613837565b5090565b600061386661386184614b5b565b614b36565b9050808382526020820190508285602086028201111561388557600080fd5b60005b858110156138b5578161389b88826139a7565b845260208401935060208301925050600181019050613888565b5050509392505050565b60006138d26138cd84614b87565b614b36565b905080838252602082019050828560208602820111156138f157600080fd5b60005b8581101561392157816139078882613aa3565b8452602084019350602083019250506001810190506138f4565b5050509392505050565b600061393e61393984614bb3565b614b36565b90508281526020810184848401111561395657600080fd5b613961848285614e05565b509392505050565b600061397c61397784614be4565b614b36565b90508281526020810184848401111561399457600080fd5b61399f848285614e05565b509392505050565b6000813590506139b681615739565b92915050565b600082601f8301126139cd57600080fd5b81356139dd848260208601613853565b91505092915050565b600082601f8301126139f757600080fd5b8135613a078482602086016138bf565b91505092915050565b600081359050613a1f81615750565b92915050565b600081359050613a3481615767565b92915050565b600081519050613a4981615767565b92915050565b600082601f830112613a6057600080fd5b8135613a7084826020860161392b565b91505092915050565b600082601f830112613a8a57600080fd5b8135613a9a848260208601613969565b91505092915050565b600081359050613ab28161577e565b92915050565b600060208284031215613aca57600080fd5b6000613ad8848285016139a7565b91505092915050565b60008060408385031215613af457600080fd5b6000613b02858286016139a7565b9250506020613b13858286016139a7565b9150509250929050565b600080600080600060a08688031215613b3557600080fd5b6000613b43888289016139a7565b9550506020613b54888289016139a7565b945050604086013567ffffffffffffffff811115613b7157600080fd5b613b7d888289016139e6565b935050606086013567ffffffffffffffff811115613b9a57600080fd5b613ba6888289016139e6565b925050608086013567ffffffffffffffff811115613bc357600080fd5b613bcf88828901613a4f565b9150509295509295909350565b600080600080600060a08688031215613bf457600080fd5b6000613c02888289016139a7565b9550506020613c13888289016139a7565b9450506040613c2488828901613aa3565b9350506060613c3588828901613aa3565b925050608086013567ffffffffffffffff811115613c5257600080fd5b613c5e88828901613a4f565b9150509295509295909350565b60008060408385031215613c7e57600080fd5b6000613c8c858286016139a7565b9250506020613c9d85828601613a10565b9150509250929050565b60008060408385031215613cba57600080fd5b6000613cc8858286016139a7565b9250506020613cd985828601613aa3565b9150509250929050565b60008060408385031215613cf657600080fd5b600083013567ffffffffffffffff811115613d1057600080fd5b613d1c858286016139bc565b925050602083013567ffffffffffffffff811115613d3957600080fd5b613d45858286016139e6565b9150509250929050565b600080600060608486031215613d6457600080fd5b6000613d7286828701613a10565b9350506020613d8386828701613aa3565b9250506040613d9486828701613a10565b9150509250925092565b600060208284031215613db057600080fd5b6000613dbe84828501613a25565b91505092915050565b600060208284031215613dd957600080fd5b6000613de784828501613a3a565b91505092915050565b600060208284031215613e0257600080fd5b600082013567ffffffffffffffff811115613e1c57600080fd5b613e2884828501613a79565b91505092915050565b600060208284031215613e4357600080fd5b6000613e5184828501613aa3565b91505092915050565b60008060408385031215613e6d57600080fd5b6000613e7b85828601613aa3565b925050602083013567ffffffffffffffff811115613e9857600080fd5b613ea485828601613a4f565b9150509250929050565b60008060408385031215613ec157600080fd5b6000613ecf85828601613aa3565b9250506020613ee085828601613aa3565b9150509250929050565b600080600060608486031215613eff57600080fd5b6000613f0d86828701613aa3565b9350506020613f1e86828701613aa3565b925050604084013567ffffffffffffffff811115613f3b57600080fd5b613f4786828701613a4f565b9150509250925092565b6000613f5d8383613f81565b60208301905092915050565b6000613f7583836144b3565b60208301905092915050565b613f8a81614d7a565b82525050565b613f9981614d7a565b82525050565b6000613faa82614c35565b613fb48185614c7b565b9350613fbf83614c15565b8060005b83811015613ff0578151613fd78882613f51565b9750613fe283614c61565b925050600181019050613fc3565b5085935050505092915050565b600061400882614c40565b6140128185614c8c565b935061401d83614c25565b8060005b8381101561404e5781516140358882613f69565b975061404083614c6e565b925050600181019050614021565b5085935050505092915050565b61406481614d8c565b82525050565b61407381614d98565b82525050565b61408a61408582614d98565b614ef3565b82525050565b600061409b82614c4b565b6140a58185614c9d565b93506140b5818560208601614e14565b6140be81614fac565b840191505092915050565b60006140d482614c56565b6140de8185614cae565b93506140ee818560208601614e14565b6140f781614fac565b840191505092915050565b600061410f601883614cae565b915061411a82614fca565b602082019050919050565b6000614132603483614cae565b915061413d82614ff3565b604082019050919050565b6000614155601083614cae565b915061416082615042565b602082019050919050565b6000614178602883614cae565b91506141838261506b565b604082019050919050565b600061419b601283614cae565b91506141a6826150ba565b602082019050919050565b60006141be601483614cae565b91506141c9826150e3565b602082019050919050565b60006141e1601b83614cae565b91506141ec8261510c565b602082019050919050565b6000614204601f83614cae565b915061420f82615135565b602082019050919050565b6000614227602b83614cae565b91506142328261515e565b604082019050919050565b600061424a602883614cae565b9150614255826151ad565b604082019050919050565b600061426d602683614cae565b9150614278826151fc565b604082019050919050565b6000614290602483614cae565b915061429b8261524b565b604082019050919050565b60006142b3600283614cbf565b91506142be8261529a565b600282019050919050565b60006142d6602983614cae565b91506142e1826152c3565b604082019050919050565b60006142f9602283614cae565b915061430482615312565b604082019050919050565b600061431c602583614cae565b915061432782615361565b604082019050919050565b600061433f603283614cae565b915061434a826153b0565b604082019050919050565b6000614362602283614cae565b915061436d826153ff565b604082019050919050565b6000614385602383614cae565b91506143908261544e565b604082019050919050565b60006143a8602a83614cae565b91506143b38261549d565b604082019050919050565b60006143cb602083614cae565b91506143d6826154ec565b602082019050919050565b60006143ee600f83614cae565b91506143f982615515565b602082019050919050565b6000614411601583614cae565b915061441c8261553e565b602082019050919050565b6000614434602983614cae565b915061443f82615567565b604082019050919050565b6000614457602983614cae565b9150614462826155b6565b604082019050919050565b600061447a602883614cae565b915061448582615605565b604082019050919050565b600061449d602183614cae565b91506144a882615654565b604082019050919050565b6144bc81614dee565b82525050565b6144cb81614dee565b82525050565b6144da81614df8565b82525050565b60006144eb826142a6565b91506144f78285614079565b6020820191506145078284614079565b6020820191508190509392505050565b600060208201905061452c6000830184613f90565b92915050565b600060a0820190506145476000830188613f90565b6145546020830187613f90565b81810360408301526145668186613ffd565b9050818103606083015261457a8185613ffd565b9050818103608083015261458e8184614090565b90509695505050505050565b600060a0820190506145af6000830188613f90565b6145bc6020830187613f90565b6145c960408301866144c2565b6145d660608301856144c2565b81810360808301526145e88184614090565b90509695505050505050565b60006060820190506146096000830186613f90565b61461660208301856144c2565b61462360408301846144c2565b949350505050565b600060208201905081810360008301526146458184613f9f565b905092915050565b600060208201905081810360008301526146678184613ffd565b905092915050565b600060408201905081810360008301526146898185613ffd565b9050818103602083015261469d8184613ffd565b90509392505050565b60006020820190506146bb600083018461405b565b92915050565b60006060820190506146d6600083018661406a565b6146e36020830185613f90565b6146f060408301846144c2565b949350505050565b600060a08201905061470d600083018861406a565b61471a602083018761406a565b614727604083018661406a565b61473460608301856144c2565b6147416080830184613f90565b9695505050505050565b6000608082019050614760600083018761406a565b61476d60208301866144d1565b61477a604083018561406a565b614787606083018461406a565b95945050505050565b600060208201905081810360008301526147aa81846140c9565b905092915050565b600060208201905081810360008301526147cb81614102565b9050919050565b600060208201905081810360008301526147eb81614125565b9050919050565b6000602082019050818103600083015261480b81614148565b9050919050565b6000602082019050818103600083015261482b8161416b565b9050919050565b6000602082019050818103600083015261484b8161418e565b9050919050565b6000602082019050818103600083015261486b816141b1565b9050919050565b6000602082019050818103600083015261488b816141d4565b9050919050565b600060208201905081810360008301526148ab816141f7565b9050919050565b600060208201905081810360008301526148cb8161421a565b9050919050565b600060208201905081810360008301526148eb8161423d565b9050919050565b6000602082019050818103600083015261490b81614260565b9050919050565b6000602082019050818103600083015261492b81614283565b9050919050565b6000602082019050818103600083015261494b816142c9565b9050919050565b6000602082019050818103600083015261496b816142ec565b9050919050565b6000602082019050818103600083015261498b8161430f565b9050919050565b600060208201905081810360008301526149ab81614332565b9050919050565b600060208201905081810360008301526149cb81614355565b9050919050565b600060208201905081810360008301526149eb81614378565b9050919050565b60006020820190508181036000830152614a0b8161439b565b9050919050565b60006020820190508181036000830152614a2b816143be565b9050919050565b60006020820190508181036000830152614a4b816143e1565b9050919050565b60006020820190508181036000830152614a6b81614404565b9050919050565b60006020820190508181036000830152614a8b81614427565b9050919050565b60006020820190508181036000830152614aab8161444a565b9050919050565b60006020820190508181036000830152614acb8161446d565b9050919050565b60006020820190508181036000830152614aeb81614490565b9050919050565b6000602082019050614b0760008301846144c2565b92915050565b6000604082019050614b2260008301856144c2565b614b2f60208301846144c2565b9392505050565b6000614b40614b51565b9050614b4c8282614e79565b919050565b6000604051905090565b600067ffffffffffffffff821115614b7657614b75614f5b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614ba257614ba1614f5b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bce57614bcd614f5b565b5b614bd782614fac565b9050602081019050919050565b600067ffffffffffffffff821115614bff57614bfe614f5b565b5b614c0882614fac565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614cd582614dee565b9150614ce083614dee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d1557614d14614efd565b5b828201905092915050565b6000614d2b82614dee565b9150614d3683614dee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6f57614d6e614efd565b5b828202905092915050565b6000614d8582614dce565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614e32578082015181840152602081019050614e17565b83811115614e41576000848401525b50505050565b60006002820490506001821680614e5f57607f821691505b60208210811415614e7357614e72614f2c565b5b50919050565b614e8282614fac565b810181811067ffffffffffffffff82111715614ea157614ea0614f5b565b5b80604052505050565b6000614eb582614dee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ee857614ee7614efd565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115614fa95760046000803e614fa6600051614fbd565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4e4f545f494e5f53414c455f54494d4500000000000000000000000000000000600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f544f4b454e2e0000000000000000000000000000600082015250565b7f53455454494e475f5a45524f5f41444452455353000000000000000000000000600082015250565b7f4e6f7420656c696769626c6520666f722077686974656c6973742e0000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e74206973206e6f7420657175616c20746860008201527f652070726963652e000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53414c455f4e4f545f4143544956450000000000000000000000000000000000600082015250565b7f45786365656473206d6178207175616e746974792e0000000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d10156156b357615736565b6156bb614b51565b60043d036004823e80513d602482011167ffffffffffffffff821117156156e3575050615736565b808201805167ffffffffffffffff8111156157015750505050615736565b80602083010160043d03850181111561571e575050505050615736565b61572d82602001850186614e79565b82955050505050505b90565b61574281614d7a565b811461574d57600080fd5b50565b61575981614d8c565b811461576457600080fd5b50565b61577081614da2565b811461577b57600080fd5b50565b61578781614dee565b811461579257600080fd5b5056fea26469706673582212206a7022d7f1624a7b35108a11f03dd0a1c3d4213fb04dec4329b2d35c22a962ac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 135,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2760,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2763,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2766,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "MAX_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2769,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "PRICE",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2772,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "saleTimestamp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2775,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2778,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2781,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "whitelistSwitch",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2784,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "treasury",
        "offset": 2,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2788,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "hasMint",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2793,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "idHolder",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}