{
  "address": "0x6D74bc185C563808B48a881D3b0c5C7BF5003f6B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HOLDER_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveaway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnSwitch",
          "type": "bool"
        }
      ],
      "name": "setBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_HOLDER_MAX",
          "type": "uint256"
        }
      ],
      "name": "setMAX_TOKEN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_saleTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_whitelistSwitch",
          "type": "bool"
        }
      ],
      "name": "setSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1b7df755831265ca26e2c6564b65cdec11f5b18e907ab6c491d967b584a5045",
  "receipt": {
    "to": null,
    "from": "0x5279246E3626Cebe71a4c181382A50a71d2A4156",
    "contractAddress": "0x6D74bc185C563808B48a881D3b0c5C7BF5003f6B",
    "transactionIndex": 12,
    "gasUsed": "5066113",
    "logsBloom": "0x
    "blockHash": "0xa396d68c46caf6d30a951941d88fdbcfade88cf952177d131e7659fe4cf14ef7",
    "transactionHash": "0xa1b7df755831265ca26e2c6564b65cdec11f5b18e907ab6c491d967b584a5045",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10292101,
        "transactionHash": "0xa1b7df755831265ca26e2c6564b65cdec11f5b18e907ab6c491d967b584a5045",
        "address": "0x6D74bc185C563808B48a881D3b0c5C7BF5003f6B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xa396d68c46caf6d30a951941d88fdbcfade88cf952177d131e7659fe4cf14ef7"
      }
    ],
    "blockNumber": 10292101,
    "cumulativeGasUsed": "20516385",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "dc73fab0792f0dd90fecdc471a06537d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLDER_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnSwitch\",\"type\":\"bool\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_HOLDER_MAX\",\"type\":\"uint256\"}],\"name\":\"setMAX_TOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_saleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistSwitch\",\"type\":\"bool\"}],\"name\":\"setSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlockBanana.sol\":\"BlockBanana\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BlockBanana.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n//  ___  _           _       ___\\n// | _ )| | ___  __ | |__   | _ ) __ _  _ _   __ _  _ _   __ _\\n// | _ \\\\| |/ _ \\\\/ _|| / /   | _ \\\\/ _` || ' \\\\ / _` || ' \\\\ / _` |\\n// |___/|_|\\\\___/\\\\__||_\\\\_\\\\   |___/\\\\__,_||_||_|\\\\__,_||_||_|\\\\__,_|\\n\\ncontract BlockBanana is Ownable, EIP712, ERC1155{\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Variables\\n\\t// ------------------------------------------------------------------------\\n\\t// string private _name = \\\"Block Banana\\\";\\n\\tstring private _name = \\\"BB\\\"; //\\n\\tstring private _symbol = \\\"BB\\\"; //\\n\\tuint256 public MAX_TOKEN = 10000;\\n\\tuint256 public HOLDER_MAX = 2;\\n\\tuint256 public PRICE = 0.2 ether;\\n\\tuint256 public saleTimestamp = 1642410000; // \\n\\tuint256 public totalSupply = 0;\\n\\tbool public hasSaleStarted = true; //\\n\\tbool public whitelistSwitch = true;\\n\\tbool public burnSwitch = false;\\n\\taddress public treasury = 0x5279246E3626Cebe71a4c181382A50a71d2A4156; //\\n\\n\\tmapping (address => uint256) public hasMint;\\n\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()ERC1155(\\\"https://gateway.pinata.cloud/ipfs/Qmak7SQmUrh9ujcBLu6DdJwYU7Wtyp1gx67iuHFR4woJ7o\\\")\\n\\tEIP712(\\\"Block Banana\\\", \\\"1.0.0\\\"){} \\n\\t\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 quantity, uint256 totalSupply);\\n\\n\\t// Modifiers\\n\\t// ------------------------------------------------------------------------\\n    modifier onlySale() {\\n\\t\\trequire(hasSaleStarted == true, \\\"SALE_NOT_ACTIVE\\\");\\n        require(block.timestamp >= saleTimestamp, \\\"NOT_IN_SALE_TIME\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn owner() == recoveredAddr;\\n\\t}\\n\\n\\t// Mint functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintNFT(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlySale{\\n\\t\\tif (whitelistSwitch == true){\\n\\t\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\t}\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_TOKEN, \\\"Exceeds MAX_TOKEN.\\\");\\n\\t\\trequire(quantity > 0 && hasMint[msg.sender].add(quantity) <= HOLDER_MAX, \\\"Exceeds max quantity.\\\");\\n\\t\\trequire(msg.value == PRICE.mul(quantity), \\\"Ether value sent is not equal the price.\\\");\\n\\n\\t\\t_mint(msg.sender, 1, quantity, \\\"\\\");\\n\\t\\t\\n\\t\\thasMint[msg.sender] = hasMint[msg.sender].add(quantity);\\n\\t\\ttotalSupply = totalSupply.add(quantity);\\n\\n\\t\\temit mintEvent(msg.sender, quantity, totalSupply);\\n\\t}\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveaway(address to, uint256 quantity) external onlyOwner{\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_TOKEN, \\\"Exceeds MAX_TOKEN.\\\");\\n\\t\\trequire(quantity > 0 && hasMint[to].add(quantity) <= HOLDER_MAX, \\\"Exceeds max quantity.\\\");\\n\\n\\t\\t_mint(to, 1, quantity, \\\"\\\");\\n\\n\\t\\thasMint[to] = hasMint[to].add(quantity);\\n\\t\\ttotalSupply = totalSupply.add(quantity);\\n\\n\\t\\temit mintEvent(to, quantity, totalSupply);\\n\\t}\\n\\n\\t// Burn functions\\n\\t// ------------------------------------------------------------------------\\n    function burn(address account, uint256 quantity) public virtual {\\n        require(burnSwitch == true, \\\"Burn hasn't started.\\\");\\n        require(account == _msgSender() || isApprovedForAll(account, _msgSender()), \\\"Caller is not owner nor approved.\\\");\\n\\n        _burn(account, 1, quantity);\\n    }\\n\\n\\t// setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setMAX_TOKEN(uint256 _MAX_TOKEN, uint256 _HOLDER_MAX) external onlyOwner {\\n\\t\\tMAX_TOKEN = _MAX_TOKEN;\\n\\t\\tHOLDER_MAX = _HOLDER_MAX;\\n\\t}\\n\\n\\tfunction set_PRICE(uint256 _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory baseURI) public onlyOwner {\\n\\t\\t_setURI(baseURI);\\n\\t}\\n\\n    function setSaleTime(bool _hasSaleStarted, uint256 _saleTimestamp, bool _whitelistSwitch) external onlyOwner {\\n        hasSaleStarted = _hasSaleStarted;\\n        saleTimestamp = _saleTimestamp;\\n\\t\\twhitelistSwitch = _whitelistSwitch;\\n    }\\n\\n    function setBurn(bool _burnSwitch) external onlyOwner {\\n        burnSwitch = _burnSwitch;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(treasury != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x761e0985f9a04fa47c3f61dccbbed49fdaa9ea7b0fc9618410b9f1dc31310acd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040526040518060400160405280600281526020017f42420000000000000000000000000000000000000000000000000000000000008152506004908051906020019062000052929190620003d8565b506040518060400160405280600281526020017f424200000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000a0929190620003d8565b5061271060065560026007556702c68af0bb1400006008556361e530106009556000600a556001600b60006101000a81548160ff0219169083151502179055506001600b60016101000a81548160ff0219169083151502179055506000600b60026101000a81548160ff021916908315150217905550735279246e3626cebe71a4c181382a50a71d2a4156600b60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200017857600080fd5b5060405180608001604052806050815260200162005bf3605091396040518060400160405280600c81526020017f426c6f636b2042616e616e6100000000000000000000000000000000000000008152506040518060400160405280600581526020017f312e302e300000000000000000000000000000000000000000000000000000008152506200021f62000213620002b460201b60201c565b620002bc60201b60201c565b60008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a08181525050620002878184846200038060201b60201c565b608081815250508061010081815250505050505050620002ad81620003bc60201b60201c565b50620005c5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600083838346306040516020016200039d959493929190620004bb565b6040516020818303038152906040528051906020012090509392505050565b8060039080519060200190620003d4929190620003d8565b5050565b828054620003e69062000560565b90600052602060002090601f0160209004810192826200040a576000855562000456565b82601f106200042557805160ff191683800117855562000456565b8280016001018555821562000456579182015b828111156200045557825182559160200191906001019062000438565b5b50905062000465919062000469565b5090565b5b80821115620004845760008160009055506001016200046a565b5090565b620004938162000518565b82525050565b620004a4816200052c565b82525050565b620004b58162000556565b82525050565b600060a082019050620004d2600083018862000499565b620004e1602083018762000499565b620004f0604083018662000499565b620004ff6060830185620004aa565b6200050e608083018462000488565b9695505050505050565b6000620005258262000536565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200057957607f821691505b6020821081141562000590576200058f62000596565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60805160a05160c05160e051610100516155e96200060a6000396000612f6c01526000612fae01526000612f8d01526000612f1901526000612f4101526155e96000f3fe6080604052600436106101f85760003560e01c806385852ce41161010d578063bd55cf0d116100a0578063dfadaed71161006f578063dfadaed7146106f4578063e985e9c51461071d578063f0f442601461075a578063f242432a14610783578063f2fde38b146107ac576101f8565b8063bd55cf0d14610647578063c1c25bc514610670578063c7822598146106ad578063d46c2811146106d8576101f8565b80639dc29fac116100dc5780639dc29fac1461059f578063a22cb465146105c8578063b6970204146105f1578063bcd25ee51461061c576101f8565b806385852ce4146104e15780638d859f3e1461051e5780638da5cb5b1461054957806395d89b4114610574576101f8565b80632eb2c2d61161019057806361d027b31161015f57806361d027b3146104415780636456c2051461046c5780636e1bd32314610495578063715018a6146104c0578063853828b6146104d7576101f8565b80632eb2c2d61461038957806339cce68e146103b25780634e1273f4146103db57806355f804b314610418576101f8565b80630e89341c116101cc5780630e89341c146102cb578063155d27dc1461030857806318160ddd146103335780631c8b232d1461035e576101f8565b8062fdd58e146101fd57806301ffc9a71461023a578063050225ea1461027757806306fdde03146102a0575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190613a7e565b6107d5565b60405161023191906148d1565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613b9e565b61089f565b60405161026e9190614445565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190613a7e565b610981565b005b3480156102ac57600080fd5b506102b5610c05565b6040516102c2919061452f565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190613c31565b610c97565b6040516102ff919061452f565b60405180910390f35b34801561031457600080fd5b5061031d610d2b565b60405161032a91906148d1565b60405180910390f35b34801561033f57600080fd5b50610348610d31565b60405161035591906148d1565b60405180910390f35b34801561036a57600080fd5b50610373610d37565b6040516103809190614445565b60405180910390f35b34801561039557600080fd5b506103b060048036038101906103ab91906138f4565b610d4a565b005b3480156103be57600080fd5b506103d960048036038101906103d49190613b4f565b610deb565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190613aba565b610ea7565b60405161040f91906143ec565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190613bf0565b611058565b005b34801561044d57600080fd5b506104566110e0565b60405161046391906142d8565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e9190613c31565b611106565b005b3480156104a157600080fd5b506104aa61118c565b6040516104b791906148d1565b60405180910390f35b3480156104cc57600080fd5b506104d5611192565b005b6104df61121a565b005b3480156104ed57600080fd5b5061050860048036038101906105039190613c5a565b6112f8565b6040516105159190614445565b60405180910390f35b34801561052a57600080fd5b5061053361139f565b60405161054091906148d1565b60405180910390f35b34801561055557600080fd5b5061055e6113a5565b60405161056b91906142d8565b60405180910390f35b34801561058057600080fd5b506105896113ce565b604051610596919061452f565b60405180910390f35b3480156105ab57600080fd5b506105c660048036038101906105c19190613a7e565b611460565b005b3480156105d457600080fd5b506105ef60048036038101906105ea9190613a42565b611553565b005b3480156105fd57600080fd5b506106066116d4565b6040516106139190614445565b60405180910390f35b34801561062857600080fd5b506106316116e7565b60405161063e9190614445565b60405180910390f35b34801561065357600080fd5b5061066e60048036038101906106699190613b26565b6116fa565b005b34801561067c57600080fd5b506106976004803603810190610692919061388f565b611793565b6040516106a491906148d1565b60405180910390f35b3480156106b957600080fd5b506106c26117ab565b6040516106cf91906148d1565b60405180910390f35b6106f260048036038101906106ed9190613cea565b6117b1565b005b34801561070057600080fd5b5061071b60048036038101906107169190613cae565b611b11565b005b34801561072957600080fd5b50610744600480360381019061073f91906138b8565b611b9f565b6040516107519190614445565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c919061388f565b611c33565b005b34801561078f57600080fd5b506107aa60048036038101906107a591906139b3565b611d85565b005b3480156107b857600080fd5b506107d360048036038101906107ce919061388f565b611e26565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90614651565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061096a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061097a575061097982611f1e565b5b9050919050565b610989611f88565b73ffffffffffffffffffffffffffffffffffffffff166109a76113a5565b73ffffffffffffffffffffffffffffffffffffffff16146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f4906147d1565b60405180910390fd5b600654610a1582600a54611f9090919063ffffffff16565b1115610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d906145d1565b60405180910390fd5b600081118015610ab95750600754610ab682600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b11155b610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90614811565b60405180910390fd5b610b148260018360405180602001604052806000815250611fa6565b610b6681600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bbe81600a54611f9090919063ffffffff16565b600a819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282600a54604051610bf9939291906143b5565b60405180910390a15050565b606060048054610c1490614bed565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4090614bed565b8015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b5050505050905090565b606060038054610ca690614bed565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd290614bed565b8015610d1f5780601f10610cf457610100808354040283529160200191610d1f565b820191906000526020600020905b815481529060010190602001808311610d0257829003601f168201915b50505050509050919050565b60075481565b600a5481565b600b60009054906101000a900460ff1681565b610d52611f88565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610d985750610d9785610d92611f88565b611b9f565b5b610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce90614751565b60405180910390fd5b610de4858585858561213d565b5050505050565b610df3611f88565b73ffffffffffffffffffffffffffffffffffffffff16610e116113a5565b73ffffffffffffffffffffffffffffffffffffffff1614610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e906147d1565b60405180910390fd5b82600b60006101000a81548160ff0219169083151502179055508160098190555080600b60016101000a81548160ff021916908315150217905550505050565b60608151835114610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490614871565b60405180910390fd5b6000835167ffffffffffffffff811115610f30577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e5781602001602082028036833780820191505090505b50905060005b845181101561104d57610ff7858281518110610fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610fea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107d5565b828281518110611030577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508061104690614c50565b9050610f64565b508091505092915050565b611060611f88565b73ffffffffffffffffffffffffffffffffffffffff1661107e6113a5565b73ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906147d1565b60405180910390fd5b6110dd816124a0565b50565b600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61110e611f88565b73ffffffffffffffffffffffffffffffffffffffff1661112c6113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906147d1565b60405180910390fd5b8060088190555050565b60065481565b61119a611f88565b73ffffffffffffffffffffffffffffffffffffffff166111b86113a5565b73ffffffffffffffffffffffffffffffffffffffff161461120e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611205906147d1565b60405180910390fd5b61121860006124ba565b565b611222611f88565b73ffffffffffffffffffffffffffffffffffffffff166112406113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d906147d1565b60405180910390fd5b600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050506112f657600080fd5b565b60008061135e6113587f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec161132a611f88565b8760405160200161133d93929190614460565b6040516020818303038152906040528051906020012061257e565b84612598565b90508073ffffffffffffffffffffffffffffffffffffffff1661137f6113a5565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546113dd90614bed565b80601f016020809104026020016040519081016040528092919081815260200182805461140990614bed565b80156114565780601f1061142b57610100808354040283529160200191611456565b820191906000526020600020905b81548152906001019060200180831161143957829003601f168201915b5050505050905090565b60011515600b60029054906101000a900460ff161515146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad906146d1565b60405180910390fd5b6114be611f88565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115045750611503826114fe611f88565b611b9f565b5b611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90614831565b60405180910390fd5b61154f826001836125bf565b5050565b8173ffffffffffffffffffffffffffffffffffffffff16611572611f88565b73ffffffffffffffffffffffffffffffffffffffff1614156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090614851565b60405180910390fd5b80600260006115d6611f88565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611683611f88565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116c89190614445565b60405180910390a35050565b600b60029054906101000a900460ff1681565b600b60019054906101000a900460ff1681565b611702611f88565b73ffffffffffffffffffffffffffffffffffffffff166117206113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d906147d1565b60405180910390fd5b80600b60026101000a81548160ff02191690831515021790555050565b600c6020528060005260406000206000915090505481565b60095481565b60011515600b60009054906101000a900460ff16151514611807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe906147f1565b60405180910390fd5b60095442101561184c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184390614591565b60405180910390fd5b60011515600b60019054906101000a900460ff16151514156118b25761187282826112f8565b6118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a890614611565b60405180910390fd5b5b6006546118ca84600a54611f9090919063ffffffff16565b111561190b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611902906145d1565b60405180910390fd5b60008311801561196e575060075461196b84600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b11155b6119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490614811565b60405180910390fd5b6119c2836008546127de90919063ffffffff16565b3414611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa90614671565b60405180910390fd5b611a1f3360018560405180602001604052806000815250611fa6565b611a7183600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ac983600a54611f9090919063ffffffff16565b600a819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384600a54604051611b04939291906143b5565b60405180910390a1505050565b611b19611f88565b73ffffffffffffffffffffffffffffffffffffffff16611b376113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b84906147d1565b60405180910390fd5b81600681905550806007819055505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c3b611f88565b73ffffffffffffffffffffffffffffffffffffffff16611c596113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca6906147d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d38906145f1565b60405180910390fd5b80600b60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d8d611f88565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611dd35750611dd285611dcd611f88565b611b9f565b5b611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e09906146f1565b60405180910390fd5b611e1f85858585856127f4565b5050505050565b611e2e611f88565b73ffffffffffffffffffffffffffffffffffffffff16611e4c6113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e99906147d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0990614691565b60405180910390fd5b611f1b816124ba565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008183611f9e9190614a70565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200d906148b1565b60405180910390fd5b6000612020611f88565b90506120418160008761203288612a79565b61203b88612a79565b87612b3f565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120a19190614a70565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161211f9291906148ec565b60405180910390a461213681600087878787612b47565b5050505050565b8151835114612181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217890614891565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e890614731565b60405180910390fd5b60006121fb611f88565b905061220b818787878787612b3f565b60005b845181101561240b576000858281518110612252577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110612297577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612330906147b1565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123f09190614a70565b925050819055505050508061240490614c50565b905061220e565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161248292919061440e565b60405180910390a4612498818787878787612d2e565b505050505050565b80600390805190602001906124b6929190613587565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061259161258b612f15565b83612fd8565b9050919050565b60008060006125a7858561300b565b915091506125b48161308e565b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561262f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262690614791565b60405180910390fd5b6000612639611f88565b90506126698185600061264b87612a79565b61265487612a79565b60405180602001604052806000815250612b3f565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f8906146b1565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127cf9291906148ec565b60405180910390a45050505050565b600081836127ec9190614ac6565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285b90614731565b60405180910390fd5b600061286e611f88565b905061288e81878761287f88612a79565b61288888612a79565b87612b3f565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291d906147b1565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129dd9190614a70565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612a5a9291906148ec565b60405180910390a4612a70828888888888612b47565b50505050505050565b60606000600167ffffffffffffffff811115612abe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612aec5781602001602082028036833780820191505090505b5090508281600081518110612b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b505050505050565b612b668473ffffffffffffffffffffffffffffffffffffffff166133df565b15612d26578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612bac95949392919061435b565b602060405180830381600087803b158015612bc657600080fd5b505af1925050508015612bf757506040513d601f19601f82011682018060405250810190612bf49190613bc7565b60015b612c9d57612c03614d30565b806308c379a01415612c605750612c186154c1565b80612c235750612c62565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c57919061452f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9490614571565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1b906145b1565b60405180910390fd5b505b505050505050565b612d4d8473ffffffffffffffffffffffffffffffffffffffff166133df565b15612f0d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612d939594939291906142f3565b602060405180830381600087803b158015612dad57600080fd5b505af1925050508015612dde57506040513d601f19601f82011682018060405250810190612ddb9190613bc7565b60015b612e8457612dea614d30565b806308c379a01415612e475750612dff6154c1565b80612e0a5750612e49565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3e919061452f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7b90614571565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f02906145b1565b60405180910390fd5b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415612f67577f00000000000000000000000000000000000000000000000000000000000000009050612fd5565b612fd27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006133f2565b90505b90565b60008282604051602001612fed9291906142a1565b60405160208183030381529060405280519060200120905092915050565b60008060418351141561304d5760008060006020860151925060408601519150606086015160001a90506130418782858561342c565b94509450505050613087565b60408351141561307e576000806020850151915060408501519050613073868383613539565b935093505050613087565b60006002915091505b9250929050565b600060048111156130c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613101577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561310c576133dc565b60016004811115613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561317f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156131c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b790614551565b60405180910390fd5b600260048111156131fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613233577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326b90614631565b60405180910390fd5b600360048111156132ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156132e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331f90614711565b60405180910390fd5b600480811115613361577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561339a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d290614771565b60405180910390fd5b5b50565b600080823b905060008111915050919050565b6000838383463060405160200161340d959493929190614497565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613467576000600391509150613530565b601b8560ff161415801561347f5750601c8560ff1614155b15613491576000600491509150613530565b6000600187878787604051600081526020016040526040516134b694939291906144ea565b6020604051602081039080840390855afa1580156134d8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561352757600060019250925050613530565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506135798782888561342c565b935093505050935093915050565b82805461359390614bed565b90600052602060002090601f0160209004810192826135b557600085556135fc565b82601f106135ce57805160ff19168380011785556135fc565b828001600101855582156135fc579182015b828111156135fb5782518255916020019190600101906135e0565b5b509050613609919061360d565b5090565b5b8082111561362657600081600090555060010161360e565b5090565b600061363d6136388461493a565b614915565b9050808382526020820190508285602086028201111561365c57600080fd5b60005b8581101561368c5781613672888261377e565b84526020840193506020830192505060018101905061365f565b5050509392505050565b60006136a96136a484614966565b614915565b905080838252602082019050828560208602820111156136c857600080fd5b60005b858110156136f857816136de888261387a565b8452602084019350602083019250506001810190506136cb565b5050509392505050565b600061371561371084614992565b614915565b90508281526020810184848401111561372d57600080fd5b613738848285614bab565b509392505050565b600061375361374e846149c3565b614915565b90508281526020810184848401111561376b57600080fd5b613776848285614bab565b509392505050565b60008135905061378d81615557565b92915050565b600082601f8301126137a457600080fd5b81356137b484826020860161362a565b91505092915050565b600082601f8301126137ce57600080fd5b81356137de848260208601613696565b91505092915050565b6000813590506137f68161556e565b92915050565b60008135905061380b81615585565b92915050565b60008151905061382081615585565b92915050565b600082601f83011261383757600080fd5b8135613847848260208601613702565b91505092915050565b600082601f83011261386157600080fd5b8135613871848260208601613740565b91505092915050565b6000813590506138898161559c565b92915050565b6000602082840312156138a157600080fd5b60006138af8482850161377e565b91505092915050565b600080604083850312156138cb57600080fd5b60006138d98582860161377e565b92505060206138ea8582860161377e565b9150509250929050565b600080600080600060a0868803121561390c57600080fd5b600061391a8882890161377e565b955050602061392b8882890161377e565b945050604086013567ffffffffffffffff81111561394857600080fd5b613954888289016137bd565b935050606086013567ffffffffffffffff81111561397157600080fd5b61397d888289016137bd565b925050608086013567ffffffffffffffff81111561399a57600080fd5b6139a688828901613826565b9150509295509295909350565b600080600080600060a086880312156139cb57600080fd5b60006139d98882890161377e565b95505060206139ea8882890161377e565b94505060406139fb8882890161387a565b9350506060613a0c8882890161387a565b925050608086013567ffffffffffffffff811115613a2957600080fd5b613a3588828901613826565b9150509295509295909350565b60008060408385031215613a5557600080fd5b6000613a638582860161377e565b9250506020613a74858286016137e7565b9150509250929050565b60008060408385031215613a9157600080fd5b6000613a9f8582860161377e565b9250506020613ab08582860161387a565b9150509250929050565b60008060408385031215613acd57600080fd5b600083013567ffffffffffffffff811115613ae757600080fd5b613af385828601613793565b925050602083013567ffffffffffffffff811115613b1057600080fd5b613b1c858286016137bd565b9150509250929050565b600060208284031215613b3857600080fd5b6000613b46848285016137e7565b91505092915050565b600080600060608486031215613b6457600080fd5b6000613b72868287016137e7565b9350506020613b838682870161387a565b9250506040613b94868287016137e7565b9150509250925092565b600060208284031215613bb057600080fd5b6000613bbe848285016137fc565b91505092915050565b600060208284031215613bd957600080fd5b6000613be784828501613811565b91505092915050565b600060208284031215613c0257600080fd5b600082013567ffffffffffffffff811115613c1c57600080fd5b613c2884828501613850565b91505092915050565b600060208284031215613c4357600080fd5b6000613c518482850161387a565b91505092915050565b60008060408385031215613c6d57600080fd5b6000613c7b8582860161387a565b925050602083013567ffffffffffffffff811115613c9857600080fd5b613ca485828601613826565b9150509250929050565b60008060408385031215613cc157600080fd5b6000613ccf8582860161387a565b9250506020613ce08582860161387a565b9150509250929050565b600080600060608486031215613cff57600080fd5b6000613d0d8682870161387a565b9350506020613d1e8682870161387a565b925050604084013567ffffffffffffffff811115613d3b57600080fd5b613d4786828701613826565b9150509250925092565b6000613d5d8383614274565b60208301905092915050565b613d7281614b20565b82525050565b6000613d8382614a04565b613d8d8185614a32565b9350613d98836149f4565b8060005b83811015613dc9578151613db08882613d51565b9750613dbb83614a25565b925050600181019050613d9c565b5085935050505092915050565b613ddf81614b32565b82525050565b613dee81614b3e565b82525050565b613e05613e0082614b3e565b614c99565b82525050565b6000613e1682614a0f565b613e208185614a43565b9350613e30818560208601614bba565b613e3981614d52565b840191505092915050565b6000613e4f82614a1a565b613e598185614a54565b9350613e69818560208601614bba565b613e7281614d52565b840191505092915050565b6000613e8a601883614a54565b9150613e9582614d70565b602082019050919050565b6000613ead603483614a54565b9150613eb882614d99565b604082019050919050565b6000613ed0601083614a54565b9150613edb82614de8565b602082019050919050565b6000613ef3602883614a54565b9150613efe82614e11565b604082019050919050565b6000613f16601283614a54565b9150613f2182614e60565b602082019050919050565b6000613f39601483614a54565b9150613f4482614e89565b602082019050919050565b6000613f5c601b83614a54565b9150613f6782614eb2565b602082019050919050565b6000613f7f601f83614a54565b9150613f8a82614edb565b602082019050919050565b6000613fa2602b83614a54565b9150613fad82614f04565b604082019050919050565b6000613fc5602883614a54565b9150613fd082614f53565b604082019050919050565b6000613fe8602683614a54565b9150613ff382614fa2565b604082019050919050565b600061400b602483614a54565b915061401682614ff1565b604082019050919050565b600061402e601483614a54565b915061403982615040565b602082019050919050565b6000614051600283614a65565b915061405c82615069565b600282019050919050565b6000614074602983614a54565b915061407f82615092565b604082019050919050565b6000614097602283614a54565b91506140a2826150e1565b604082019050919050565b60006140ba602583614a54565b91506140c582615130565b604082019050919050565b60006140dd603283614a54565b91506140e88261517f565b604082019050919050565b6000614100602283614a54565b915061410b826151ce565b604082019050919050565b6000614123602383614a54565b915061412e8261521d565b604082019050919050565b6000614146602a83614a54565b91506141518261526c565b604082019050919050565b6000614169602083614a54565b9150614174826152bb565b602082019050919050565b600061418c600f83614a54565b9150614197826152e4565b602082019050919050565b60006141af601583614a54565b91506141ba8261530d565b602082019050919050565b60006141d2602183614a54565b91506141dd82615336565b604082019050919050565b60006141f5602983614a54565b915061420082615385565b604082019050919050565b6000614218602983614a54565b9150614223826153d4565b604082019050919050565b600061423b602883614a54565b915061424682615423565b604082019050919050565b600061425e602183614a54565b915061426982615472565b604082019050919050565b61427d81614b94565b82525050565b61428c81614b94565b82525050565b61429b81614b9e565b82525050565b60006142ac82614044565b91506142b88285613df4565b6020820191506142c88284613df4565b6020820191508190509392505050565b60006020820190506142ed6000830184613d69565b92915050565b600060a0820190506143086000830188613d69565b6143156020830187613d69565b81810360408301526143278186613d78565b9050818103606083015261433b8185613d78565b9050818103608083015261434f8184613e0b565b90509695505050505050565b600060a0820190506143706000830188613d69565b61437d6020830187613d69565b61438a6040830186614283565b6143976060830185614283565b81810360808301526143a98184613e0b565b90509695505050505050565b60006060820190506143ca6000830186613d69565b6143d76020830185614283565b6143e46040830184614283565b949350505050565b600060208201905081810360008301526144068184613d78565b905092915050565b600060408201905081810360008301526144288185613d78565b9050818103602083015261443c8184613d78565b90509392505050565b600060208201905061445a6000830184613dd6565b92915050565b60006060820190506144756000830186613de5565b6144826020830185613d69565b61448f6040830184614283565b949350505050565b600060a0820190506144ac6000830188613de5565b6144b96020830187613de5565b6144c66040830186613de5565b6144d36060830185614283565b6144e06080830184613d69565b9695505050505050565b60006080820190506144ff6000830187613de5565b61450c6020830186614292565b6145196040830185613de5565b6145266060830184613de5565b95945050505050565b600060208201905081810360008301526145498184613e44565b905092915050565b6000602082019050818103600083015261456a81613e7d565b9050919050565b6000602082019050818103600083015261458a81613ea0565b9050919050565b600060208201905081810360008301526145aa81613ec3565b9050919050565b600060208201905081810360008301526145ca81613ee6565b9050919050565b600060208201905081810360008301526145ea81613f09565b9050919050565b6000602082019050818103600083015261460a81613f2c565b9050919050565b6000602082019050818103600083015261462a81613f4f565b9050919050565b6000602082019050818103600083015261464a81613f72565b9050919050565b6000602082019050818103600083015261466a81613f95565b9050919050565b6000602082019050818103600083015261468a81613fb8565b9050919050565b600060208201905081810360008301526146aa81613fdb565b9050919050565b600060208201905081810360008301526146ca81613ffe565b9050919050565b600060208201905081810360008301526146ea81614021565b9050919050565b6000602082019050818103600083015261470a81614067565b9050919050565b6000602082019050818103600083015261472a8161408a565b9050919050565b6000602082019050818103600083015261474a816140ad565b9050919050565b6000602082019050818103600083015261476a816140d0565b9050919050565b6000602082019050818103600083015261478a816140f3565b9050919050565b600060208201905081810360008301526147aa81614116565b9050919050565b600060208201905081810360008301526147ca81614139565b9050919050565b600060208201905081810360008301526147ea8161415c565b9050919050565b6000602082019050818103600083015261480a8161417f565b9050919050565b6000602082019050818103600083015261482a816141a2565b9050919050565b6000602082019050818103600083015261484a816141c5565b9050919050565b6000602082019050818103600083015261486a816141e8565b9050919050565b6000602082019050818103600083015261488a8161420b565b9050919050565b600060208201905081810360008301526148aa8161422e565b9050919050565b600060208201905081810360008301526148ca81614251565b9050919050565b60006020820190506148e66000830184614283565b92915050565b60006040820190506149016000830185614283565b61490e6020830184614283565b9392505050565b600061491f614930565b905061492b8282614c1f565b919050565b6000604051905090565b600067ffffffffffffffff82111561495557614954614d01565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561498157614980614d01565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156149ad576149ac614d01565b5b6149b682614d52565b9050602081019050919050565b600067ffffffffffffffff8211156149de576149dd614d01565b5b6149e782614d52565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614a7b82614b94565b9150614a8683614b94565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614abb57614aba614ca3565b5b828201905092915050565b6000614ad182614b94565b9150614adc83614b94565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614b1557614b14614ca3565b5b828202905092915050565b6000614b2b82614b74565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614bd8578082015181840152602081019050614bbd565b83811115614be7576000848401525b50505050565b60006002820490506001821680614c0557607f821691505b60208210811415614c1957614c18614cd2565b5b50919050565b614c2882614d52565b810181811067ffffffffffffffff82111715614c4757614c46614d01565b5b80604052505050565b6000614c5b82614b94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c8e57614c8d614ca3565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115614d4f5760046000803e614d4c600051614d63565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4e4f545f494e5f53414c455f54494d4500000000000000000000000000000000600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f544f4b454e2e0000000000000000000000000000600082015250565b7f53455454494e475f5a45524f5f41444452455353000000000000000000000000600082015250565b7f4e6f7420656c696769626c6520666f722077686974656c6973742e0000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e74206973206e6f7420657175616c20746860008201527f652070726963652e000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f4275726e206861736e277420737461727465642e000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53414c455f4e4f545f4143544956450000000000000000000000000000000000600082015250565b7f45786365656473206d6178207175616e746974792e0000000000000000000000600082015250565b7f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d10156154d157615554565b6154d9614930565b60043d036004823e80513d602482011167ffffffffffffffff82111715615501575050615554565b808201805167ffffffffffffffff81111561551f5750505050615554565b80602083010160043d03850181111561553c575050505050615554565b61554b82602001850186614c1f565b82955050505050505b90565b61556081614b20565b811461556b57600080fd5b50565b61557781614b32565b811461558257600080fd5b50565b61558e81614b48565b811461559957600080fd5b50565b6155a581614b94565b81146155b057600080fd5b5056fea2646970667358221220cd2afd3e92118329a9f18caf9b940de9dbac0260f026555a07d7807e323cd72e64736f6c6343000804003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d616b3753516d55726839756a63424c753644644a77595537577479703167783637697548465234776f4a376f",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c806385852ce41161010d578063bd55cf0d116100a0578063dfadaed71161006f578063dfadaed7146106f4578063e985e9c51461071d578063f0f442601461075a578063f242432a14610783578063f2fde38b146107ac576101f8565b8063bd55cf0d14610647578063c1c25bc514610670578063c7822598146106ad578063d46c2811146106d8576101f8565b80639dc29fac116100dc5780639dc29fac1461059f578063a22cb465146105c8578063b6970204146105f1578063bcd25ee51461061c576101f8565b806385852ce4146104e15780638d859f3e1461051e5780638da5cb5b1461054957806395d89b4114610574576101f8565b80632eb2c2d61161019057806361d027b31161015f57806361d027b3146104415780636456c2051461046c5780636e1bd32314610495578063715018a6146104c0578063853828b6146104d7576101f8565b80632eb2c2d61461038957806339cce68e146103b25780634e1273f4146103db57806355f804b314610418576101f8565b80630e89341c116101cc5780630e89341c146102cb578063155d27dc1461030857806318160ddd146103335780631c8b232d1461035e576101f8565b8062fdd58e146101fd57806301ffc9a71461023a578063050225ea1461027757806306fdde03146102a0575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190613a7e565b6107d5565b60405161023191906148d1565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613b9e565b61089f565b60405161026e9190614445565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190613a7e565b610981565b005b3480156102ac57600080fd5b506102b5610c05565b6040516102c2919061452f565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed9190613c31565b610c97565b6040516102ff919061452f565b60405180910390f35b34801561031457600080fd5b5061031d610d2b565b60405161032a91906148d1565b60405180910390f35b34801561033f57600080fd5b50610348610d31565b60405161035591906148d1565b60405180910390f35b34801561036a57600080fd5b50610373610d37565b6040516103809190614445565b60405180910390f35b34801561039557600080fd5b506103b060048036038101906103ab91906138f4565b610d4a565b005b3480156103be57600080fd5b506103d960048036038101906103d49190613b4f565b610deb565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190613aba565b610ea7565b60405161040f91906143ec565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190613bf0565b611058565b005b34801561044d57600080fd5b506104566110e0565b60405161046391906142d8565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e9190613c31565b611106565b005b3480156104a157600080fd5b506104aa61118c565b6040516104b791906148d1565b60405180910390f35b3480156104cc57600080fd5b506104d5611192565b005b6104df61121a565b005b3480156104ed57600080fd5b5061050860048036038101906105039190613c5a565b6112f8565b6040516105159190614445565b60405180910390f35b34801561052a57600080fd5b5061053361139f565b60405161054091906148d1565b60405180910390f35b34801561055557600080fd5b5061055e6113a5565b60405161056b91906142d8565b60405180910390f35b34801561058057600080fd5b506105896113ce565b604051610596919061452f565b60405180910390f35b3480156105ab57600080fd5b506105c660048036038101906105c19190613a7e565b611460565b005b3480156105d457600080fd5b506105ef60048036038101906105ea9190613a42565b611553565b005b3480156105fd57600080fd5b506106066116d4565b6040516106139190614445565b60405180910390f35b34801561062857600080fd5b506106316116e7565b60405161063e9190614445565b60405180910390f35b34801561065357600080fd5b5061066e60048036038101906106699190613b26565b6116fa565b005b34801561067c57600080fd5b506106976004803603810190610692919061388f565b611793565b6040516106a491906148d1565b60405180910390f35b3480156106b957600080fd5b506106c26117ab565b6040516106cf91906148d1565b60405180910390f35b6106f260048036038101906106ed9190613cea565b6117b1565b005b34801561070057600080fd5b5061071b60048036038101906107169190613cae565b611b11565b005b34801561072957600080fd5b50610744600480360381019061073f91906138b8565b611b9f565b6040516107519190614445565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c919061388f565b611c33565b005b34801561078f57600080fd5b506107aa60048036038101906107a591906139b3565b611d85565b005b3480156107b857600080fd5b506107d360048036038101906107ce919061388f565b611e26565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90614651565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061096a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061097a575061097982611f1e565b5b9050919050565b610989611f88565b73ffffffffffffffffffffffffffffffffffffffff166109a76113a5565b73ffffffffffffffffffffffffffffffffffffffff16146109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f4906147d1565b60405180910390fd5b600654610a1582600a54611f9090919063ffffffff16565b1115610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d906145d1565b60405180910390fd5b600081118015610ab95750600754610ab682600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b11155b610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90614811565b60405180910390fd5b610b148260018360405180602001604052806000815250611fa6565b610b6681600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bbe81600a54611f9090919063ffffffff16565b600a819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282600a54604051610bf9939291906143b5565b60405180910390a15050565b606060048054610c1490614bed565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4090614bed565b8015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b5050505050905090565b606060038054610ca690614bed565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd290614bed565b8015610d1f5780601f10610cf457610100808354040283529160200191610d1f565b820191906000526020600020905b815481529060010190602001808311610d0257829003601f168201915b50505050509050919050565b60075481565b600a5481565b600b60009054906101000a900460ff1681565b610d52611f88565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610d985750610d9785610d92611f88565b611b9f565b5b610dd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dce90614751565b60405180910390fd5b610de4858585858561213d565b5050505050565b610df3611f88565b73ffffffffffffffffffffffffffffffffffffffff16610e116113a5565b73ffffffffffffffffffffffffffffffffffffffff1614610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e906147d1565b60405180910390fd5b82600b60006101000a81548160ff0219169083151502179055508160098190555080600b60016101000a81548160ff021916908315150217905550505050565b60608151835114610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490614871565b60405180910390fd5b6000835167ffffffffffffffff811115610f30577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f5e5781602001602082028036833780820191505090505b50905060005b845181101561104d57610ff7858281518110610fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610fea577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107d5565b828281518110611030577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508061104690614c50565b9050610f64565b508091505092915050565b611060611f88565b73ffffffffffffffffffffffffffffffffffffffff1661107e6113a5565b73ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906147d1565b60405180910390fd5b6110dd816124a0565b50565b600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61110e611f88565b73ffffffffffffffffffffffffffffffffffffffff1661112c6113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906147d1565b60405180910390fd5b8060088190555050565b60065481565b61119a611f88565b73ffffffffffffffffffffffffffffffffffffffff166111b86113a5565b73ffffffffffffffffffffffffffffffffffffffff161461120e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611205906147d1565b60405180910390fd5b61121860006124ba565b565b611222611f88565b73ffffffffffffffffffffffffffffffffffffffff166112406113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d906147d1565b60405180910390fd5b600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050506112f657600080fd5b565b60008061135e6113587f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec161132a611f88565b8760405160200161133d93929190614460565b6040516020818303038152906040528051906020012061257e565b84612598565b90508073ffffffffffffffffffffffffffffffffffffffff1661137f6113a5565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546113dd90614bed565b80601f016020809104026020016040519081016040528092919081815260200182805461140990614bed565b80156114565780601f1061142b57610100808354040283529160200191611456565b820191906000526020600020905b81548152906001019060200180831161143957829003601f168201915b5050505050905090565b60011515600b60029054906101000a900460ff161515146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad906146d1565b60405180910390fd5b6114be611f88565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115045750611503826114fe611f88565b611b9f565b5b611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90614831565b60405180910390fd5b61154f826001836125bf565b5050565b8173ffffffffffffffffffffffffffffffffffffffff16611572611f88565b73ffffffffffffffffffffffffffffffffffffffff1614156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090614851565b60405180910390fd5b80600260006115d6611f88565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611683611f88565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116c89190614445565b60405180910390a35050565b600b60029054906101000a900460ff1681565b600b60019054906101000a900460ff1681565b611702611f88565b73ffffffffffffffffffffffffffffffffffffffff166117206113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176d906147d1565b60405180910390fd5b80600b60026101000a81548160ff02191690831515021790555050565b600c6020528060005260406000206000915090505481565b60095481565b60011515600b60009054906101000a900460ff16151514611807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe906147f1565b60405180910390fd5b60095442101561184c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184390614591565b60405180910390fd5b60011515600b60019054906101000a900460ff16151514156118b25761187282826112f8565b6118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a890614611565b60405180910390fd5b5b6006546118ca84600a54611f9090919063ffffffff16565b111561190b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611902906145d1565b60405180910390fd5b60008311801561196e575060075461196b84600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b11155b6119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490614811565b60405180910390fd5b6119c2836008546127de90919063ffffffff16565b3414611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa90614671565b60405180910390fd5b611a1f3360018560405180602001604052806000815250611fa6565b611a7183600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f9090919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ac983600a54611f9090919063ffffffff16565b600a819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384600a54604051611b04939291906143b5565b60405180910390a1505050565b611b19611f88565b73ffffffffffffffffffffffffffffffffffffffff16611b376113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b84906147d1565b60405180910390fd5b81600681905550806007819055505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c3b611f88565b73ffffffffffffffffffffffffffffffffffffffff16611c596113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca6906147d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d38906145f1565b60405180910390fd5b80600b60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d8d611f88565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611dd35750611dd285611dcd611f88565b611b9f565b5b611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e09906146f1565b60405180910390fd5b611e1f85858585856127f4565b5050505050565b611e2e611f88565b73ffffffffffffffffffffffffffffffffffffffff16611e4c6113a5565b73ffffffffffffffffffffffffffffffffffffffff1614611ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e99906147d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0990614691565b60405180910390fd5b611f1b816124ba565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008183611f9e9190614a70565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200d906148b1565b60405180910390fd5b6000612020611f88565b90506120418160008761203288612a79565b61203b88612a79565b87612b3f565b826001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120a19190614a70565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161211f9291906148ec565b60405180910390a461213681600087878787612b47565b5050505050565b8151835114612181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217890614891565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e890614731565b60405180910390fd5b60006121fb611f88565b905061220b818787878787612b3f565b60005b845181101561240b576000858281518110612252577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110612297577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612330906147b1565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123f09190614a70565b925050819055505050508061240490614c50565b905061220e565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161248292919061440e565b60405180910390a4612498818787878787612d2e565b505050505050565b80600390805190602001906124b6929190613587565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061259161258b612f15565b83612fd8565b9050919050565b60008060006125a7858561300b565b915091506125b48161308e565b819250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561262f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262690614791565b60405180910390fd5b6000612639611f88565b90506126698185600061264b87612a79565b61265487612a79565b60405180602001604052806000815250612b3f565b60006001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f8906146b1565b60405180910390fd5b8281036001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516127cf9291906148ec565b60405180910390a45050505050565b600081836127ec9190614ac6565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285b90614731565b60405180910390fd5b600061286e611f88565b905061288e81878761287f88612a79565b61288888612a79565b87612b3f565b60006001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291d906147b1565b60405180910390fd5b8381036001600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129dd9190614a70565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612a5a9291906148ec565b60405180910390a4612a70828888888888612b47565b50505050505050565b60606000600167ffffffffffffffff811115612abe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612aec5781602001602082028036833780820191505090505b5090508281600081518110612b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b505050505050565b612b668473ffffffffffffffffffffffffffffffffffffffff166133df565b15612d26578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612bac95949392919061435b565b602060405180830381600087803b158015612bc657600080fd5b505af1925050508015612bf757506040513d601f19601f82011682018060405250810190612bf49190613bc7565b60015b612c9d57612c03614d30565b806308c379a01415612c605750612c186154c1565b80612c235750612c62565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c57919061452f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9490614571565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1b906145b1565b60405180910390fd5b505b505050505050565b612d4d8473ffffffffffffffffffffffffffffffffffffffff166133df565b15612f0d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612d939594939291906142f3565b602060405180830381600087803b158015612dad57600080fd5b505af1925050508015612dde57506040513d601f19601f82011682018060405250810190612ddb9190613bc7565b60015b612e8457612dea614d30565b806308c379a01415612e475750612dff6154c1565b80612e0a5750612e49565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3e919061452f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7b90614571565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f02906145b1565b60405180910390fd5b505b505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415612f67577f00000000000000000000000000000000000000000000000000000000000000009050612fd5565b612fd27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006133f2565b90505b90565b60008282604051602001612fed9291906142a1565b60405160208183030381529060405280519060200120905092915050565b60008060418351141561304d5760008060006020860151925060408601519150606086015160001a90506130418782858561342c565b94509450505050613087565b60408351141561307e576000806020850151915060408501519050613073868383613539565b935093505050613087565b60006002915091505b9250929050565b600060048111156130c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613101577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561310c576133dc565b60016004811115613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561317f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156131c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131b790614551565b60405180910390fd5b600260048111156131fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613233577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326b90614631565b60405180910390fd5b600360048111156132ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156132e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331f90614711565b60405180910390fd5b600480811115613361577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561339a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d290614771565b60405180910390fd5b5b50565b600080823b905060008111915050919050565b6000838383463060405160200161340d959493929190614497565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613467576000600391509150613530565b601b8560ff161415801561347f5750601c8560ff1614155b15613491576000600491509150613530565b6000600187878787604051600081526020016040526040516134b694939291906144ea565b6020604051602081039080840390855afa1580156134d8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561352757600060019250925050613530565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506135798782888561342c565b935093505050935093915050565b82805461359390614bed565b90600052602060002090601f0160209004810192826135b557600085556135fc565b82601f106135ce57805160ff19168380011785556135fc565b828001600101855582156135fc579182015b828111156135fb5782518255916020019190600101906135e0565b5b509050613609919061360d565b5090565b5b8082111561362657600081600090555060010161360e565b5090565b600061363d6136388461493a565b614915565b9050808382526020820190508285602086028201111561365c57600080fd5b60005b8581101561368c5781613672888261377e565b84526020840193506020830192505060018101905061365f565b5050509392505050565b60006136a96136a484614966565b614915565b905080838252602082019050828560208602820111156136c857600080fd5b60005b858110156136f857816136de888261387a565b8452602084019350602083019250506001810190506136cb565b5050509392505050565b600061371561371084614992565b614915565b90508281526020810184848401111561372d57600080fd5b613738848285614bab565b509392505050565b600061375361374e846149c3565b614915565b90508281526020810184848401111561376b57600080fd5b613776848285614bab565b509392505050565b60008135905061378d81615557565b92915050565b600082601f8301126137a457600080fd5b81356137b484826020860161362a565b91505092915050565b600082601f8301126137ce57600080fd5b81356137de848260208601613696565b91505092915050565b6000813590506137f68161556e565b92915050565b60008135905061380b81615585565b92915050565b60008151905061382081615585565b92915050565b600082601f83011261383757600080fd5b8135613847848260208601613702565b91505092915050565b600082601f83011261386157600080fd5b8135613871848260208601613740565b91505092915050565b6000813590506138898161559c565b92915050565b6000602082840312156138a157600080fd5b60006138af8482850161377e565b91505092915050565b600080604083850312156138cb57600080fd5b60006138d98582860161377e565b92505060206138ea8582860161377e565b9150509250929050565b600080600080600060a0868803121561390c57600080fd5b600061391a8882890161377e565b955050602061392b8882890161377e565b945050604086013567ffffffffffffffff81111561394857600080fd5b613954888289016137bd565b935050606086013567ffffffffffffffff81111561397157600080fd5b61397d888289016137bd565b925050608086013567ffffffffffffffff81111561399a57600080fd5b6139a688828901613826565b9150509295509295909350565b600080600080600060a086880312156139cb57600080fd5b60006139d98882890161377e565b95505060206139ea8882890161377e565b94505060406139fb8882890161387a565b9350506060613a0c8882890161387a565b925050608086013567ffffffffffffffff811115613a2957600080fd5b613a3588828901613826565b9150509295509295909350565b60008060408385031215613a5557600080fd5b6000613a638582860161377e565b9250506020613a74858286016137e7565b9150509250929050565b60008060408385031215613a9157600080fd5b6000613a9f8582860161377e565b9250506020613ab08582860161387a565b9150509250929050565b60008060408385031215613acd57600080fd5b600083013567ffffffffffffffff811115613ae757600080fd5b613af385828601613793565b925050602083013567ffffffffffffffff811115613b1057600080fd5b613b1c858286016137bd565b9150509250929050565b600060208284031215613b3857600080fd5b6000613b46848285016137e7565b91505092915050565b600080600060608486031215613b6457600080fd5b6000613b72868287016137e7565b9350506020613b838682870161387a565b9250506040613b94868287016137e7565b9150509250925092565b600060208284031215613bb057600080fd5b6000613bbe848285016137fc565b91505092915050565b600060208284031215613bd957600080fd5b6000613be784828501613811565b91505092915050565b600060208284031215613c0257600080fd5b600082013567ffffffffffffffff811115613c1c57600080fd5b613c2884828501613850565b91505092915050565b600060208284031215613c4357600080fd5b6000613c518482850161387a565b91505092915050565b60008060408385031215613c6d57600080fd5b6000613c7b8582860161387a565b925050602083013567ffffffffffffffff811115613c9857600080fd5b613ca485828601613826565b9150509250929050565b60008060408385031215613cc157600080fd5b6000613ccf8582860161387a565b9250506020613ce08582860161387a565b9150509250929050565b600080600060608486031215613cff57600080fd5b6000613d0d8682870161387a565b9350506020613d1e8682870161387a565b925050604084013567ffffffffffffffff811115613d3b57600080fd5b613d4786828701613826565b9150509250925092565b6000613d5d8383614274565b60208301905092915050565b613d7281614b20565b82525050565b6000613d8382614a04565b613d8d8185614a32565b9350613d98836149f4565b8060005b83811015613dc9578151613db08882613d51565b9750613dbb83614a25565b925050600181019050613d9c565b5085935050505092915050565b613ddf81614b32565b82525050565b613dee81614b3e565b82525050565b613e05613e0082614b3e565b614c99565b82525050565b6000613e1682614a0f565b613e208185614a43565b9350613e30818560208601614bba565b613e3981614d52565b840191505092915050565b6000613e4f82614a1a565b613e598185614a54565b9350613e69818560208601614bba565b613e7281614d52565b840191505092915050565b6000613e8a601883614a54565b9150613e9582614d70565b602082019050919050565b6000613ead603483614a54565b9150613eb882614d99565b604082019050919050565b6000613ed0601083614a54565b9150613edb82614de8565b602082019050919050565b6000613ef3602883614a54565b9150613efe82614e11565b604082019050919050565b6000613f16601283614a54565b9150613f2182614e60565b602082019050919050565b6000613f39601483614a54565b9150613f4482614e89565b602082019050919050565b6000613f5c601b83614a54565b9150613f6782614eb2565b602082019050919050565b6000613f7f601f83614a54565b9150613f8a82614edb565b602082019050919050565b6000613fa2602b83614a54565b9150613fad82614f04565b604082019050919050565b6000613fc5602883614a54565b9150613fd082614f53565b604082019050919050565b6000613fe8602683614a54565b9150613ff382614fa2565b604082019050919050565b600061400b602483614a54565b915061401682614ff1565b604082019050919050565b600061402e601483614a54565b915061403982615040565b602082019050919050565b6000614051600283614a65565b915061405c82615069565b600282019050919050565b6000614074602983614a54565b915061407f82615092565b604082019050919050565b6000614097602283614a54565b91506140a2826150e1565b604082019050919050565b60006140ba602583614a54565b91506140c582615130565b604082019050919050565b60006140dd603283614a54565b91506140e88261517f565b604082019050919050565b6000614100602283614a54565b915061410b826151ce565b604082019050919050565b6000614123602383614a54565b915061412e8261521d565b604082019050919050565b6000614146602a83614a54565b91506141518261526c565b604082019050919050565b6000614169602083614a54565b9150614174826152bb565b602082019050919050565b600061418c600f83614a54565b9150614197826152e4565b602082019050919050565b60006141af601583614a54565b91506141ba8261530d565b602082019050919050565b60006141d2602183614a54565b91506141dd82615336565b604082019050919050565b60006141f5602983614a54565b915061420082615385565b604082019050919050565b6000614218602983614a54565b9150614223826153d4565b604082019050919050565b600061423b602883614a54565b915061424682615423565b604082019050919050565b600061425e602183614a54565b915061426982615472565b604082019050919050565b61427d81614b94565b82525050565b61428c81614b94565b82525050565b61429b81614b9e565b82525050565b60006142ac82614044565b91506142b88285613df4565b6020820191506142c88284613df4565b6020820191508190509392505050565b60006020820190506142ed6000830184613d69565b92915050565b600060a0820190506143086000830188613d69565b6143156020830187613d69565b81810360408301526143278186613d78565b9050818103606083015261433b8185613d78565b9050818103608083015261434f8184613e0b565b90509695505050505050565b600060a0820190506143706000830188613d69565b61437d6020830187613d69565b61438a6040830186614283565b6143976060830185614283565b81810360808301526143a98184613e0b565b90509695505050505050565b60006060820190506143ca6000830186613d69565b6143d76020830185614283565b6143e46040830184614283565b949350505050565b600060208201905081810360008301526144068184613d78565b905092915050565b600060408201905081810360008301526144288185613d78565b9050818103602083015261443c8184613d78565b90509392505050565b600060208201905061445a6000830184613dd6565b92915050565b60006060820190506144756000830186613de5565b6144826020830185613d69565b61448f6040830184614283565b949350505050565b600060a0820190506144ac6000830188613de5565b6144b96020830187613de5565b6144c66040830186613de5565b6144d36060830185614283565b6144e06080830184613d69565b9695505050505050565b60006080820190506144ff6000830187613de5565b61450c6020830186614292565b6145196040830185613de5565b6145266060830184613de5565b95945050505050565b600060208201905081810360008301526145498184613e44565b905092915050565b6000602082019050818103600083015261456a81613e7d565b9050919050565b6000602082019050818103600083015261458a81613ea0565b9050919050565b600060208201905081810360008301526145aa81613ec3565b9050919050565b600060208201905081810360008301526145ca81613ee6565b9050919050565b600060208201905081810360008301526145ea81613f09565b9050919050565b6000602082019050818103600083015261460a81613f2c565b9050919050565b6000602082019050818103600083015261462a81613f4f565b9050919050565b6000602082019050818103600083015261464a81613f72565b9050919050565b6000602082019050818103600083015261466a81613f95565b9050919050565b6000602082019050818103600083015261468a81613fb8565b9050919050565b600060208201905081810360008301526146aa81613fdb565b9050919050565b600060208201905081810360008301526146ca81613ffe565b9050919050565b600060208201905081810360008301526146ea81614021565b9050919050565b6000602082019050818103600083015261470a81614067565b9050919050565b6000602082019050818103600083015261472a8161408a565b9050919050565b6000602082019050818103600083015261474a816140ad565b9050919050565b6000602082019050818103600083015261476a816140d0565b9050919050565b6000602082019050818103600083015261478a816140f3565b9050919050565b600060208201905081810360008301526147aa81614116565b9050919050565b600060208201905081810360008301526147ca81614139565b9050919050565b600060208201905081810360008301526147ea8161415c565b9050919050565b6000602082019050818103600083015261480a8161417f565b9050919050565b6000602082019050818103600083015261482a816141a2565b9050919050565b6000602082019050818103600083015261484a816141c5565b9050919050565b6000602082019050818103600083015261486a816141e8565b9050919050565b6000602082019050818103600083015261488a8161420b565b9050919050565b600060208201905081810360008301526148aa8161422e565b9050919050565b600060208201905081810360008301526148ca81614251565b9050919050565b60006020820190506148e66000830184614283565b92915050565b60006040820190506149016000830185614283565b61490e6020830184614283565b9392505050565b600061491f614930565b905061492b8282614c1f565b919050565b6000604051905090565b600067ffffffffffffffff82111561495557614954614d01565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561498157614980614d01565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156149ad576149ac614d01565b5b6149b682614d52565b9050602081019050919050565b600067ffffffffffffffff8211156149de576149dd614d01565b5b6149e782614d52565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614a7b82614b94565b9150614a8683614b94565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614abb57614aba614ca3565b5b828201905092915050565b6000614ad182614b94565b9150614adc83614b94565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614b1557614b14614ca3565b5b828202905092915050565b6000614b2b82614b74565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614bd8578082015181840152602081019050614bbd565b83811115614be7576000848401525b50505050565b60006002820490506001821680614c0557607f821691505b60208210811415614c1957614c18614cd2565b5b50919050565b614c2882614d52565b810181811067ffffffffffffffff82111715614c4757614c46614d01565b5b80604052505050565b6000614c5b82614b94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c8e57614c8d614ca3565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115614d4f5760046000803e614d4c600051614d63565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f4e4f545f494e5f53414c455f54494d4500000000000000000000000000000000600082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f544f4b454e2e0000000000000000000000000000600082015250565b7f53455454494e475f5a45524f5f41444452455353000000000000000000000000600082015250565b7f4e6f7420656c696769626c6520666f722077686974656c6973742e0000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f45746865722076616c75652073656e74206973206e6f7420657175616c20746860008201527f652070726963652e000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b7f4275726e206861736e277420737461727465642e000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53414c455f4e4f545f4143544956450000000000000000000000000000000000600082015250565b7f45786365656473206d6178207175616e746974792e0000000000000000000000600082015250565b7f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d10156154d157615554565b6154d9614930565b60043d036004823e80513d602482011167ffffffffffffffff82111715615501575050615554565b808201805167ffffffffffffffff81111561551f5750505050615554565b80602083010160043d03850181111561553c575050505050615554565b61554b82602001850186614c1f565b82955050505050505b90565b61556081614b20565b811461556b57600080fd5b50565b61557781614b32565b811461558257600080fd5b50565b61558e81614b48565b811461559957600080fd5b50565b6155a581614b94565b81146155b057600080fd5b5056fea2646970667358221220cd2afd3e92118329a9f18caf9b940de9dbac0260f026555a07d7807e323cd72e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 135,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2760,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2763,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2766,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "MAX_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2769,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "HOLDER_MAX",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2772,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "PRICE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2775,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "saleTimestamp",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2778,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2781,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2784,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "whitelistSwitch",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2787,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "burnSwitch",
        "offset": 2,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "treasury",
        "offset": 3,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2794,
        "contract": "contracts/BlockBanana.sol:BlockBanana",
        "label": "hasMint",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}